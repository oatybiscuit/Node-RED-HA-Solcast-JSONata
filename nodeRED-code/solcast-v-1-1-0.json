[{"id":"8919a3535559afa6","type":"group","z":"227fcbf9d11adcdf","name":"Solcast API","style":{"label":true,"stroke":"#6f2fa0","fill":"#ffefbf","color":"#6f2fa0"},"nodes":["c1b8c48b404dec87","cf6b35b3c3632758","c62ecf67018cf1e4","96e2c279dd9d484a","8c7f0429158e22f4","92fea85ae28492b1","55e3a0812a22479a","56bb652f7756710d","27d82ce5a90984bd"],"x":28,"y":73,"w":1394,"h":1454},{"id":"c1b8c48b404dec87","type":"group","z":"227fcbf9d11adcdf","g":"8919a3535559afa6","name":"Call API","style":{"label":true,"color":"#0070c0","stroke":"#0070c0","fill":"#ffffbf"},"nodes":["4cbe7e87c7c63a8d","05bd5a0c66618832","9f2dd56974371b76","5edc5cc63a7cc4a9","085113247171550e","f3b605c9f38ef2cd","b08ae5273038f295","cb210fd8fb9758d2","6a477dc311d93622","07a5b41d439a250c","49a6fb7867a34bc6","fc7857f90a06b0dc","22e4eb463939eb46","5b4579ad0fa3aadc","b12590db9da39906","fb79f5c3f2c0c4a9","818c306b1bb6d3df","fb8c0b11860868db","6c7f47ce99c7c81d","0f3e0720442d6aed","7287ae91d81e3ffb","20872a7ac4c189bc","e9b14fc234e3afcf","b8cac9c268c32aa4","f8e282b4afb8f236","1de88608f4ebd1e6","0f2537f38182904c","73063aaad9502c27","fcad195459232278","890a32b077102039","8c1ae10fa412a8d8","4b78031144875256","42d34b620c28b1f9","c5af3afe9465db9c","ff09cf88bba1f1c9","4976cb7e1867a8c3","ad4ba3d6ba7017d8","f06e1b57f7407408"],"x":54,"y":99,"w":1342,"h":242},{"id":"4cbe7e87c7c63a8d","type":"http request","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"API","method":"GET","ret":"obj","paytoqs":"ignore","url":"https://api.solcast.com.au/rooftop_sites/{{{parm.auth}}}/{{{parm.type}}}?format=json","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"bearer","senderr":false,"headers":[],"x":1270,"y":140,"wires":[["e9b14fc234e3afcf"]]},{"id":"05bd5a0c66618832","type":"split","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"Each","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","property":"payload","x":890,"y":140,"wires":[["9f2dd56974371b76"]]},{"id":"9f2dd56974371b76","type":"change","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"Setup","rules":[{"t":"set","p":"parm","pt":"msg","to":"payload","tot":"msg"},{"t":"set","p":"topic","pt":"msg","to":"payload.topic","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1010,"y":140,"wires":[["5edc5cc63a7cc4a9"]]},{"id":"5edc5cc63a7cc4a9","type":"delay","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"Q","pauseType":"rate","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"5","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":1130,"y":140,"wires":[["4cbe7e87c7c63a8d"]]},{"id":"085113247171550e","type":"change","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"SAVE DST","rules":[{"t":"set","p":"solarDST","pt":"flow","to":"dst","tot":"msg","dc":true}],"action":"","property":"","from":"","to":"","reg":false,"x":750,"y":140,"wires":[["05bd5a0c66618832"]]},{"id":"f3b605c9f38ef2cd","type":"link out","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"Process API","mode":"link","links":["0e50c92a2586d92b"],"x":1355,"y":200,"wires":[]},{"id":"b08ae5273038f295","type":"delay","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"1min","pauseType":"delay","timeout":"1","timeoutUnits":"minutes","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":1270,"y":200,"wires":[["f3b605c9f38ef2cd"]]},{"id":"cb210fd8fb9758d2","type":"join","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"+API","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","useparts":true,"accumulate":false,"timeout":"8","count":"","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":570,"y":180,"wires":[["fc7857f90a06b0dc"]]},{"id":"6a477dc311d93622","type":"join","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"+Stat","mode":"custom","build":"object","property":"success","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","useparts":true,"accumulate":false,"timeout":"10","count":"","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":570,"y":220,"wires":[["07a5b41d439a250c"]]},{"id":"07a5b41d439a250c","type":"change","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"History","rules":[{"t":"set","p":"history","pt":"msg","to":"solcastAPI.history","tot":"flow","dc":true},{"t":"set","p":"payload","pt":"msg","to":"(\t/* record the last 50 API call status returns */\t\t    $history:= $append(success.*, $append([],history))[[0..49]];\t\t/* count 'pass' since last midnight for total API calls used up */\t    $midnight:=$floor($millis()/86400000)*86400000;\t    $total:=$history[msec>=$midnight and stat=\"pass\"]~>$count();\t    $history~>|$[0]|{\"used\": $total}|;\t\t)","tot":"jsonata"},{"t":"set","p":"topic","pt":"msg","to":"history","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":700,"y":220,"wires":[["22e4eb463939eb46"]]},{"id":"49a6fb7867a34bc6","type":"change","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"Status","rules":[{"t":"set","p":"success","pt":"msg","to":"(\t/* Sept 24 - capture status of each API return for history */\t\t    $records:=payload.*[pv_estimate>0].period_end;\t\t\t    {\t   \"type\": topic,\t   \"item\": parm.item,\t   \"total\": parm.total,\t   \"retry\": parm.retry,\t   \"time\": dst.now_loc,\t   \"msec\": $floor($toMillis(dst.now_loc)/1800000)*1800000,\t   \"resp\": statusCode,\t   \"stat\": statusCode=200 ? \"pass\": statusCode=429 ? \"rate\" : \"fail\",\t   \"from\": $records[0],\t   \"upto\": $records[-1],\t   \"recs\": $count($records)\t    };\t\t)","tot":"jsonata"},{"t":"delete","p":"parts","pt":"msg"},{"t":"delete","p":"auth","pt":"msg"},{"t":"delete","p":"parm","pt":"msg"},{"t":"delete","p":"headers","pt":"msg"},{"t":"delete","p":"responseUrl","pt":"msg"},{"t":"delete","p":"redirectList","pt":"msg"},{"t":"delete","p":"retry","pt":"msg"},{"t":"delete","p":"responseCookies","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":430,"y":220,"wires":[["cb210fd8fb9758d2","6a477dc311d93622"]]},{"id":"fc7857f90a06b0dc","type":"change","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"Hold APIs","rules":[{"t":"set","p":"topic","pt":"msg","to":"returns","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":700,"y":180,"wires":[["22e4eb463939eb46"]]},{"id":"22e4eb463939eb46","type":"join","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","useparts":true,"accumulate":false,"timeout":"10","count":"","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":850,"y":220,"wires":[["5b4579ad0fa3aadc"]]},{"id":"5b4579ad0fa3aadc","type":"change","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"SAVE API","rules":[{"t":"set","p":"dates","pt":"msg","to":"(\t/* July 2024 */\t\t/* get dates for today, yesterday, day before, tomorrow, and day after */\t/* works just using difference between UTC and local to get offset     */\t/* ensures dates written to context even when API fails, re-done later */\t\t/* FUNCTION: extract text date from ms + days */\t    $getdate:= function($ms, $ds){$substringBefore($fromMillis($ms + $ds*86400000),\"T\")};\t\t\t/* MAIN */\t\t    $locms:=$toMillis($substringBefore($now(),\"Z\"));\t    [-2..2].(\t        $d:=$;\t        {\"date\": $getdate($locms,$d),\t         \"dayis\": [\"old\", \"yes\", \"tod\", \"tom\", \"fut\"][2+$d]  }         \t    )  \t)","tot":"jsonata"},{"t":"set","p":"outcome","pt":"msg","to":"(\t/* look at most recent API call(s) to check all returned 200  */\t/* check count of planes returned is equal to number of calls */\t\t    $a:= payload.history[0];\t    $isnum:= $count($keys(payload.returns)) = $a.total;\t\t    $x:= payload.history[msec=$a.msec].stat~>$distinct();\t\t    $isnum and $x=\"pass\" ? \"PASS\" : $isnum and $x=\"rate\" ? \"RATE\" : \"FAIL\";\t\t)","tot":"jsonata"},{"t":"set","p":"solcastAPI","pt":"flow","to":"$merge([payload.returns, {\"history\": payload.history, \"dates\": dates, \"outcome\": outcome}])","tot":"jsonata","dc":true},{"t":"move","p":"payload.history","pt":"msg","to":"history","tot":"msg"},{"t":"move","p":"payload.returns","pt":"msg","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":980,"y":220,"wires":[["6c7f47ce99c7c81d"]]},{"id":"b12590db9da39906","type":"delay","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"Rand","pauseType":"random","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"0","randomLast":"20","randomUnits":"minutes","drop":false,"allowrate":false,"outputs":1,"x":310,"y":140,"wires":[["7287ae91d81e3ffb"]]},{"id":"fb79f5c3f2c0c4a9","type":"comment","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"API call Docs","info":"Parameters:-\nmsg.payload = \"forecast\" / \"estimate\" / \"both\"\nmsg.planes  = _optional_ / [1] / [2] / [1,2]\n\nNote:-\nEach inject call request will consume one API\ncall for each type (forecast/estimate) and one\nfor each plane authorisation code.\nFor two-planes with 'both' this will be a total\nof 4 API calls from the daily 10 limit\n\n**Set Times** (inject option 1):\n{\"history\":\"00:00\",\nforecast\":[\"01:30\",\"06:00\",\"10:00\",\"14:00\"] }\n\nHistory (estimates) at a set time \"hh:mm\" or \"\" if not required\nForcast as an array of times for as many as required\nThere is no validation or error checking\n\nNOTE: all times as 'hh:mm' string are floored to half-hour\nintervals, hence the inject will run at 10:00 for a time of\n\"10:27\", and with a five minute delay and 0-20 minute random\ndelay, will actually take place between 10:05 and 10:25\n\n**Automatic** (inject option 2):\n{\"history\": \"03:00\",\n\"first_by\": \"02:00\",\n\"start_shift\": 0,\n\"plane_count\": 2,\n\"call_limit\": 10 }\n\nHistory (estimates) as a time or \"\" if not required\n\nForecasts are called evenly between sunrise and sunset, with the\nnumber of available calls distributed between sunrise and sunset.\n\nFirst-by will execute a forecast by that time (during the half hour before)\nor \"\" if not required. If the first-by occurs on or after the first call\ntime it will not take place. Earliest time permitted is \"00:30\" to trigger\nbetween midnight and 00:25\n\nStart-shift will move the first call by half hour increments, between\n-8 and +8 (4 hours before to 4 hours after sunrise).\n\nThe plane-count will be decremented from the call-limit for each of\nhistory (if requested) and first-by (if requested and if taking place)\nThe remaining calls are set out between the (offset) start time and sunset.\nThe minimum gap between calls is 1 hour, and any calls falling after sunset\nwill not take place.\n","x":150,"y":180,"wires":[]},{"id":"818c306b1bb6d3df","type":"comment","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"Auth - how to set up","info":"From Solcast account\nSet msg.auth to [a, b] array of one or two\nresource id codes for one or both planes in\nnode - \"P List\"\n\nSet API authorisation code for account into\nbearer authentication code in the API Solcast\n(http request) node - \"API\"\n","x":950,"y":180,"wires":[]},{"id":"fb8c0b11860868db","type":"comment","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"Will only update if all planes & '200'","info":"Only perform API udpate if\n- full count of expected planes returned\n- all returns are of status 200\n\nIf all status returns are 429\nthen loop with a delay to try again\nup to 'repeat count'. Cancel any waiting\nrepeat with a new timed-call\n\nNote (Mar 25):\nThe retries must pass back through DST save\nso as to update the local time used to\ncount the number of attempts in history\nAND\nAny retry must be in a new half-hour slot\nso that the count of retries brings up the\ncorrect number of distinct msec periods","x":1180,"y":300,"wires":[]},{"id":"6c7f47ce99c7c81d","type":"switch","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"OK? **","property":"outcome","propertyType":"msg","rules":[{"t":"eq","v":"PASS","vt":"str"},{"t":"eq","v":"RATE","vt":"str"},{"t":"else"}],"checkall":"false","repair":false,"outputs":3,"x":1110,"y":220,"wires":[["b08ae5273038f295"],["20872a7ac4c189bc"],[]]},{"id":"0f3e0720442d6aed","type":"link in","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"Re-call 429","links":["c5af3afe9465db9c"],"x":465,"y":180,"wires":[["f8e282b4afb8f236"]]},{"id":"7287ae91d81e3ffb","type":"change","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"P List","rules":[{"t":"set","p":"auth","pt":"msg","to":"[\"your code goes here\", \"and here\"]","tot":"json"},{"t":"set","p":"payload","pt":"msg","to":"(\t\t    $mode:= $append((payload in [\"forecast\", \"both\"] ? [\"forecasts\"]), (payload in [\"estimate\", \"both\"] ? [\"estimated_actuals\"]));\t    $planes:=$exists(planes) ? planes : [1..$count(auth)];\t    $auth:=$planes.($p:=$; {\"p\": $p, \"a\": $$.auth[$p-1]})[a][];\t    $pc:=$count($auth);\t    $tc:=$count($mode);\t    $lc:=$pc*$tc;\t\t    $auth#$p.(\t        $acode:=$.a;\t        $pnumb:=$.p;\t        $mode#$t.{\t            \"plane\": $pnumb,\t            \"type\": $,\t            \"auth\": $acode,\t            \"topic\": $uppercase($substring($,0,1)) & \"P\" & $pnumb,\t            \"item\": $p*$tc + $t+1,\t            \"total\": $lc,\t            \"retry\": 0\t        }\t    )[];\t)","tot":"jsonata"},{"t":"set","p":"calling","pt":"msg","to":"payload","tot":"msg","dc":true}],"action":"","property":"","from":"","to":"","reg":false,"x":430,"y":140,"wires":[["f8e282b4afb8f236"]]},{"id":"20872a7ac4c189bc","type":"link out","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"Try Again","mode":"link","links":["42d34b620c28b1f9"],"x":1205,"y":240,"wires":[]},{"id":"e9b14fc234e3afcf","type":"link out","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"API","mode":"link","links":["b8cac9c268c32aa4"],"x":1355,"y":140,"wires":[]},{"id":"b8cac9c268c32aa4","type":"link in","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"API","links":["e9b14fc234e3afcf"],"x":325,"y":220,"wires":[["49a6fb7867a34bc6"]]},{"id":"f8e282b4afb8f236","type":"function","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"TZ (Luxon)","func":"// Jan 25. Rewrite to use Luxon DateTime in place of moment.js\n\n// For Home Assistant NR addon, 'TZ' should be set, otherwise set TZ in the enclosing flow properties\n// use NR-TZ as the timezone rather than local, as this permits testing and for 'off-site' location\n\nconst TZbase = \"Europe/London\";                         // a backstop default hard-coded\nconst NRzone = env.get(\"TZ\");                           // lift from Node-RED env 'TZ' variable\nconst LCzone = luxon.DateTime.local().zoneName;         // have a stab at a guess (not guaranteed)\nlet TZzone = NRzone || LCzone || TZbase;                // 1. NR setting 2. guess 3. default\n\nconst luxnow = luxon.DateTime.now();                    // datetime now in local machine timezone\nconst luxzone = luxon.DateTime.now().setZone(TZzone);   // datetime now in timezone of choice\nconst utcoff = luxzone.offset;\nconst utchrs = luxzone.toFormat('ZZZ');\n\n// look in January and June to see if UTC offset different => DST necessary\n// NOTE Luxon indexes months from 1 and not 0 so June =6 (how sensible...)\n\nconst testjan = luxon.DateTime.fromObject({month: 1, day: 1 }, {zone: TZzone});\nconst testjun = luxon.DateTime.fromObject({month: 6, day: 1 }, {zone: TZzone});\n\n// luxon can return the full timezone but the ZZZZ abbreviations are not assured\n// use this function to return the combined first letters from the full string\nfunction short_name(ldt){\n    return ldt.toFormat('ZZZZZ').match(/\\b(\\w)/g).join('')\n};\n\nconst dst_jan = {\n    \"testdt\": testjan.toISO(),\n    \"offset\": testjan.offset,\n    \"tzhour\": testjan.toFormat('ZZ'),\n    \"tztech\": testjan.toFormat('ZZZ'),\n    \"tzname\": testjan.toFormat('ZZZZZ'),\n    \"tzlett\": short_name(testjan)\n    };\nconst dst_jun = {\n    \"testdt\": testjun.toISO(),\n    \"offset\": testjun.offset,\n    \"tzhour\": testjun.toFormat('ZZ'),\n    \"tztech\": testjun.toFormat('ZZZ'),\n    \"tzname\": testjun.toFormat('ZZZZZ'),\n    \"tzlett\": short_name(testjun)\n    };\n\n// fixed dates for year start (yyyy-01-01T00:00:00.000) and end (yyyy-12-31T23:59:59.999)\n// note that these are in local time for the given timezone, not UTC\n\nconst year_start = luxzone.startOf('year');\nconst year_end   = luxzone.endOf('year');\n\n\nconst dstarea = dst_jan.offset != dst_jun.offset;   // does DST apply here?\nconst dstnrth = dst_jun.offset > dst_jan.offset;    // north or south hemisphere?\nconst dstison = luxzone.isInDST;                    // is DST on now? So much easier!\n                                                    // is DST currently on - assume clocks go forwards in DST...\n//const dstison = (dstarea && utcoff == Math.max(dst_jan.offset, dst_jun.offset));   \n                \nconst dstmodes = dstarea == false ? [\"OFF\", \"OFF\", \"OFF\"] : dstnrth ? [\"OFF\", \"ON\", \"OFF\"] : [\"ON\", \"OFF\",\"ON\"];\n\n// function to scan for DST change day and then 1/4 hour - start at DateTime-object and # days to scan\n// note that luxon datetime objects are immutable, and best to test for time offset change not hour change\n\nfunction get_dst(event, lookdays){\n    event = event.set({hour: 12});                              // start with hour=12 to find the day\n    const testoffset = event.offset;\n    const stopat = event.plus({days: lookdays});                // prevent endless loop\n    while (event.offset == testoffset && event < stopat){\n        event = event.plus({days: 1});\n    };\n    event = event.set({hour: 0});                               // start at midnight to find the (quarter) hour                       \n    while (event.offset == testoffset && event.hour < 6) {\n        event = event.plus({minutes: 15});\n    };\n    return event;\n};\n\n// scan from 1st March to end April, and 1st September to end November\nlet oneDST, twoDST = null;\n\nif (dstarea) {\n    oneDST = get_dst(luxon.DateTime.fromObject({month: 3, day: 1}, {zone: TZzone}), 61);\n    twoDST = get_dst(luxon.DateTime.fromObject({month: 9, day: 1}, {zone: TZzone}), 93);\n    } else {\n    oneDST = luxon.DateTime.fromObject({ month: 3, day: 20 }, { zone: TZzone });\n    twoDST = luxon.DateTime.fromObject({ month: 9, day: 22 }, { zone: TZzone });        \n    }\n\n// for both DST and non-DST, make three periods contiguous as Unix Seconds\n// period 'A' from Year Start to first DST change less 1 second\nlet dst_a = {\n    \"period\": \"A\",\n    \"from\": {\n        \"local\": year_start.toISO(),\n        \"utc\": year_start.toUTC(),\n        \"seconds\": year_start.toSeconds() },\n    \"upto\": {\n        \"local\": oneDST.toISO(),\n        \"utc\": oneDST.toUTC(),\n        \"seconds\": oneDST.minus({ second: 1 }).toSeconds() },\n    \"offset\": dst_jan.offset,\n    \"timezone\": {\"name\": dst_jan.tzname, \"letters\": dst_jan.tzlett, \"hours\": dst_jan.tzhour, \"short\": dst_jan.tztech},\n    \"mode\": dstmodes[0]\n    };\n// period 'B' from first DST change to second DST change less 1 second\nlet dst_b = {\n    \"period\": \"B\",\n    \"from\": {\n        \"local\": oneDST.toISO(),\n        \"utc\": oneDST.toUTC(),\n        \"seconds\": oneDST.toSeconds()},\n    \"upto\": {\n        \"local\": twoDST.toISO(),\n        \"utc\": twoDST.toUTC(),\n        \"seconds\": twoDST.minus({ second: 1 }).toSeconds() },\n    \"offset\": dst_jun.offset,\n    \"timezone\": { \"name\": dst_jun.tzname, \"letters\": dst_jun.tzlett, \"hours\": dst_jun.tzhour, \"short\": dst_jun.tztech },\n    \"mode\": dstmodes[1]\n    };\n// period 'C' from second DST change to end of the year\nlet dst_c = {\n    \"period\": \"C\",\n    \"from\": {\n        \"local\": twoDST.toISO(),\n        \"utc\": twoDST.toUTC(),\n        \"seconds\": twoDST.toSeconds() },\n    \"upto\": {\n        \"local\": year_end.toISO(),\n        \"utc\": year_end.toUTC(),\n        \"seconds\": Math.floor(year_end.toSeconds()) },\n    \"offset\": dst_jan.offset,\n    \"timezone\": { \"name\": dst_jan.tzname, \"letters\": dst_jan.tzlett, \"hours\": dst_jan.tzhour, \"short\": dst_jan.tztech },\n    \"mode\": dstmodes[2]\n    };\n \n// final result\nmsg.dst =\n    {\n     \"LCzone\": LCzone,\n     \"NRzone\": NRzone,\n     \"tzused\": TZzone,\n     \"now_loc\": luxnow.toString(),\n     \"now_utc\": luxnow.setZone('utc').toISO(),\n     \"zone_loc\": luxzone.toString(),\n     \"zone_utc\": luxzone.setZone('utc').toISO(),\n     \"for_year\": luxzone.year,\n     \"utc_offset\": utcoff,\n     \"zone_hours\": utchrs,\n     \"dst_aware\": dstarea,\n     \"dst_north\": dstnrth,\n     \"dst_is_on\": dstison,\n     \"dst_details\": [dst_a, dst_b, dst_c]     \n    };\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[{"var":"luxon","module":"luxon"}],"x":590,"y":140,"wires":[["085113247171550e"]]},{"id":"1de88608f4ebd1e6","type":"inject","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"Automatic","props":[{"p":"auto","v":"{\"history\": \"03:00\",\t\"first_by\": \"02:00\",\t\"start_shift\": 0,\t\"plane_count\": 2,\t\"call_limit\": 10\t}","vt":"jsonata"},{"p":"auto.sunrise","v":"solarSUN.rises","vt":"flow"},{"p":"auto.sunset","v":"solarSUN.sets","vt":"flow"},{"p":"auto.zone_hours","v":"solarDST.zone_hours","vt":"flow"},{"p":"auto.localtime","v":"$now('[H01]:[m01]', auto.zone_hours)","vt":"jsonata"},{"p":"payload"}],"repeat":"","crontab":"*/30 0-23 * * *","once":false,"onceDelay":0.1,"topic":"","payload":"(\t/* Jan 2025 - automate the API calls across the day */\t\t/* FUNCTION: 'hh:mm' to 30 minute period 0-47 */    \t    $to30:=function($time){(\t        $x:=$split($time,\":\").$number();\t        $x[0]*2+($x[1]>29 ? 1:0)\t    )};\t\t/* FUNCTION: 30min period to 'hh:mm'          */\t    $from30:=function($slot){(\t        $x:=$slot*30;\t        $h:=$floor($x/60);\t        $m:=$x-$h*60;\t        $pad(\"\" & $h,-2,\"0\") & \":\" & $pad(\"\" & $m, -2, \"0\")\t        )};\t\t    $hist:=($x:=auto.history; $exists($x) ? $x : \"\");\t    $sunfrom:=auto.sunrise;\t    $sunupto:=auto.sunset;\t    $planes:=auto.plane_count;\t\t/* a local time, for local people */\t    $time:=$to30($now('[H01]:[m01]', auto.zone_hours));\t\t    $s:=($s:=auto.start_shift; $exists($s) and $s>=-8 and $s<=8 ? $s : 0);\t    $start:=$to30($sunfrom) +$s;\t    $stops:=$to30($sunupto) -1;\t    $first:=$to30(auto.first_by) -1;\t/* early first must be between midnight and start of reqular calls. otherwise skip */\t    $early:= $first>=0 and $first<$start;\t\t/* free-calls are what is left after optional history and optional early before sunrise */\t    $calls:= (auto.call_limit - ($hist ? $planes : 0) - ($early ? $planes : 0))/$planes;\t    $callspan:=$stops-$start;\t\t/* call estimates for history if requested */\t    $api:= $hist!=\"\" ? {\"time\": $hist, \"mode\": \"estimate\"} : [];\t\t/* call first early forecast if required */\t    $api:= $early ? $append($api, {\"time\": $from30($first), \"mode\": \"forecast\"}) : $api;\t\t/* call forecasts evenly over the solar day, starting at sunrise + starting offset    */\t/* as -9 to +9 half-hours, minimum call hourly, no calls after 60 mins before sunset  */\t\t    $gap:=$round($callspan/$calls,0);\t    $gap:= $gap<2 ? 2 : $gap;\t    $api:= $append($api, [0..$calls-1].(\t        $t:=$start + $gap*$;\t        $t<$stops-1 ? {\"time\": $from30($t), \"mode\": \"forecast\"})\t        );\t\t/* if history-estimate now at same time as a forecast, remove estimate and set forecast to 'both'  */\t    $api:=$api~>|$[mode=\"forecast\" and time=$hist]|{\"mode\": \"both\"}|;\t    $both:=$exists($api[mode=\"both\"]);\t    $api:=$api[mode!=\"estimate\" or $not($both)];\t\t/* output the call mode (estimate / forecast / both) at a matching time */\t\t    $api[time=$from30($time)].mode;\t\t)","payloadType":"jsonata","x":170,"y":300,"wires":[["0f2537f38182904c"]]},{"id":"0f2537f38182904c","type":"switch","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"MT","property":"payload","propertyType":"msg","rules":[{"t":"nempty"},{"t":"else"}],"checkall":"false","repair":false,"outputs":2,"x":330,"y":300,"wires":[["890a32b077102039","4976cb7e1867a8c3"],[]]},{"id":"73063aaad9502c27","type":"delay","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"5min","pauseType":"delay","timeout":"5","timeoutUnits":"minutes","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":190,"y":140,"wires":[["b12590db9da39906"]]},{"id":"fcad195459232278","type":"inject","z":"227fcbf9d11adcdf","d":true,"g":"c1b8c48b404dec87","name":"Set Times","props":[{"p":"fixed","v":"{\"history\":\"00:00\",\"forecast\":[\"01:30\",\"06:00\",\"10:00\",\"14:00\"]}","vt":"json"},{"p":"zone_hours","v":"solarDST.zone_hours","vt":"flow"},{"p":"payload"}],"repeat":"","crontab":"*/30 0-23 * * *","once":false,"onceDelay":0.1,"topic":"","payload":"(\t/* Jan 2025 - API calls based on fixed times */\t\t    $t:=$now('[H01]:[m01]', auto.zone_hours)~>$split(\":\");\t    $time:=$t[0] & \":\" & ($t[1]<\"30\" ? \"00\" : \"30\");\t    $time in fixed.history ? \"estimate\" : $time in fixed.forecast ? \"forecast\";\t\t)","payloadType":"jsonata","x":170,"y":260,"wires":[["0f2537f38182904c"]]},{"id":"890a32b077102039","type":"link out","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"Start","mode":"link","links":["8c1ae10fa412a8d8"],"x":435,"y":260,"wires":[]},{"id":"8c1ae10fa412a8d8","type":"link in","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"Start","links":["890a32b077102039"],"x":105,"y":140,"wires":[["73063aaad9502c27"]]},{"id":"4b78031144875256","type":"inject","z":"227fcbf9d11adcdf","d":true,"g":"c1b8c48b404dec87","name":"Manual start","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"forecast","payloadType":"str","x":170,"y":220,"wires":[["0f2537f38182904c"]]},{"id":"42d34b620c28b1f9","type":"link in","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"Try Again","links":["20872a7ac4c189bc"],"x":515,"y":260,"wires":[["ff09cf88bba1f1c9"]]},{"id":"c5af3afe9465db9c","type":"link out","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"Re-call 429","mode":"link","links":["0f3e0720442d6aed"],"x":985,"y":300,"wires":[]},{"id":"ff09cf88bba1f1c9","type":"change","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"Try again","rules":[{"t":"set","p":"ratedcount","pt":"msg","to":"(\t    \t/* get the count of rate-limited calls since the last successful one */\t/* this only works where the retries are in separate half-hour slots */\t\t    $lastok:=history[stat=\"pass\"][0].msec;\t    $lastok:= $exists($lastok) ? $lastok : history[-1].msec-60000;\t    $distinct(history.msec[$>$lastok])~>$count()\t)","tot":"jsonata"},{"t":"set","p":"payload","pt":"msg","to":"calling~>|$|{\"retry\": $$.ratedcount}|","tot":"jsonata"},{"t":"set","p":"delay","pt":"msg","to":"(\t/* set a random delay between 30 and 40 minutes    */\t/* Mar 25 - don't repeat in same half-hour slot to */\t/*    avoid issues with counting history correctly */\t\t    $from:=30;\t    $upto:=40;\t\t    $rand:= $floor($random()*($upto-$from)) + $from;\t\t    $rand*60000;\t)","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":610,"y":260,"wires":[["ad4ba3d6ba7017d8"]]},{"id":"4976cb7e1867a8c3","type":"change","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"Clear","rules":[{"t":"set","p":"reset","pt":"msg","to":"true","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":610,"y":300,"wires":[["f06e1b57f7407408"]]},{"id":"ad4ba3d6ba7017d8","type":"switch","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"(3 tries)","property":"ratedcount","propertyType":"msg","rules":[{"t":"lte","v":"2","vt":"num"},{"t":"else"}],"checkall":"false","repair":false,"outputs":2,"x":750,"y":260,"wires":[["f06e1b57f7407408"],[]]},{"id":"f06e1b57f7407408","type":"delay","z":"227fcbf9d11adcdf","g":"c1b8c48b404dec87","name":"Wait","pauseType":"delayv","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":890,"y":300,"wires":[["c5af3afe9465db9c"]]},{"id":"cf6b35b3c3632758","type":"group","z":"227fcbf9d11adcdf","g":"8919a3535559afa6","name":"Process API Return","style":{"label":true,"stroke":"#0070c0","color":"#0070c0","fill":"#ffffbf"},"nodes":["4d0204ba2e4518cf","d224e69e7b98e5fe","a6061a7e7350db57","c28fbb08c61c778e","1ff33c95115f0cd9","86a2e7ce31d679ac","42600c9aca65f0cc","e8c557fa5feab56a","77684d8f7e6b11dd","0e50c92a2586d92b","884872306405ba16","2d1d3ac2f675e2f4","0b5a5b7874843c2a","e7e394cb44066459","12af8a26d5babc26"],"x":54,"y":359,"w":1342,"h":122},{"id":"4d0204ba2e4518cf","type":"change","z":"227fcbf9d11adcdf","g":"cf6b35b3c3632758","name":"Values","rules":[{"t":"set","p":"payload","pt":"msg","to":"(\t/* April 2024 - only process non-zero values for speed  */\t/* June 2024  - move *1000 as bug with just 1 plane     */\t\t/* merge planes, then merge forecasts and estimates into one array */\t\t/* FUNCTION: extract text date from ms + days */\t    $getdate:= function($ms, $ds){ $substringBefore($fromMillis($ms + $ds*86400000),\"T\") };\t\t/* FUNCTION: add all planes together for same time period (used in $reduce) */\t/*           note: at first iteration acc=array[0] val=array[1] and ind=1   */\t/*           acc: accumulator array, val: array item. ind: index count      */\t\t    $addplanes:=function($acc, $val, $ind){(\t        $last:=$acc[-1];  /* last item on accumulated array */\t        /* new period? push value to accumulator array */\t        /* same? add this values to last accumulator   */\t        /*       and write back to last accumulator    */\t        $acc:= $last.period_start != $val.period_start ? $append($acc, $val) : (\t            $total:={\t                \"estimate\":      $last.estimate      + $val.estimate,\t                \"pv_estimate\":   $last.pv_estimate   + $val.pv_estimate,\t                \"pv_estimate10\": $last.pv_estimate10 + $val.pv_estimate10,\t                \"pv_estimate90\": $last.pv_estimate90 + $val.pv_estimate90};\t            $append($acc[[0..$count($acc)-2]], $merge($append($val, $total))); )\t    )};\t\t/* FUNCTION: kW to W */\t    $thousand:=function($arr){(\t        $arr.(\t            $rec:=$;\t            $keys($).(\t                $val:=$lookup($rec,$);\t                {$: $type($val)=\"number\" ? $round($val*1000,0) : $val}\t            )~>$merge()\t        )\t    )};\t\t\t/* MAIN */\t    $base:=payload;\t    $datearray:=dates;\t\t/* merge multiple planes into one for forecasts and estimates */\t/* rename estimates pv_estimate field to 'estimate' for ease  */\t/* for speed - only process non zero records from this point  */ \t\t    $int:=$base.*.forecasts[pv_estimate>0]^(period_start);\t    $f:=$reduce($int, $addplanes)~>$thousand();\t\t    $int:=$base.*.estimated_actuals[pv_estimate>0]~>|$|{\"estimate\": pv_estimate},[\"pv_estimate\"]|;\t    $e:=$reduce($int^(period_start), $addplanes)~>$thousand();\t\t    $x:=$append($e, $f);\t    $x.(\t        $start:= period_start;\t        $date:=$substringBefore($start,\"T\");\t        $time:=$substring($start,11,5);\t        $day:=$datearray[date=$date].dayis;\t        {\"start\": $start,\t         \"date\": $date,\t         \"time\": $time,\t         \"day\": $day,\t         \"data\":{\t            $day & \"_est\": estimate,\t            $day & \"_med\": pv_estimate,\t            $day & \"_low\": pv_estimate10,\t            $day & \"_hih\": pv_estimate90}\t        });\t\t\t)","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":630,"y":400,"wires":[["86a2e7ce31d679ac"]]},{"id":"d224e69e7b98e5fe","type":"inject","z":"227fcbf9d11adcdf","d":true,"g":"cf6b35b3c3632758","name":"Manual","props":[],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":150,"y":440,"wires":[["a6061a7e7350db57"]]},{"id":"a6061a7e7350db57","type":"change","z":"227fcbf9d11adcdf","d":true,"g":"cf6b35b3c3632758","name":"Read DST+API","rules":[{"t":"set","p":"dst","pt":"msg","to":"solarDST","tot":"flow","dc":true},{"t":"set","p":"payload","pt":"msg","to":"solcastAPI","tot":"flow","dc":true}],"action":"","property":"","from":"","to":"","reg":false,"x":300,"y":440,"wires":[["884872306405ba16"]]},{"id":"c28fbb08c61c778e","type":"delay","z":"227fcbf9d11adcdf","g":"cf6b35b3c3632758","name":"Pause","pauseType":"delay","timeout":"2","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":510,"y":400,"wires":[["4d0204ba2e4518cf"]]},{"id":"1ff33c95115f0cd9","type":"change","z":"227fcbf9d11adcdf","g":"cf6b35b3c3632758","name":"Table","rules":[{"t":"set","p":"payload","pt":"msg","to":"(\t/* April 2024 Tidy Jan 2025 */\t\t/* Starting with 5-day date array, build a 240 array\t\t/* record array update as unix ms at last 30 minutes so will match the most recent start time */\t    $dates:= dates.date;\t    $array:= payload;\t    $store:= store;\t    $update:= $floor($toMillis(dst.now_loc)/1800000)*1800000;\t\t/* based on current dates, construct array of objects key=date-time, with new values to be added */\t    $value:=$dates.(\t        $date:=$;\t        $array[date=$date].{$date & \" \" & $.time: $.data}\t        ) ~>$merge() ~>|*|{\"update\": $update}|;\t\t/* build base table of objects with dates of interest in same format  */\t/* for ease of graphing, add in unix msecs time based on iso local    */\t/* set 'update' to 0 - each update will add unix-ms timestamp to this */\t\t    $hours:=[0..23];\t    $mins:=[0, 30];\t    $table:=$dates.(\t        $d:=$;\t        $hours.(\t            $h:=$;\t            $mins.(\t                $m:=$;\t                $t:=$formatInteger($h,'00:') & $formatInteger($m, '00');\t                $key:= $d & \" \" & $t;\t                $iso:= $d & \"T\" & $t & \":00\";\t                {$key: {\"date\": $d, \"time\": $t, \"msec\": $toMillis($iso), \"update\": 0}} )\t            ) )~>$merge();\t\t/* pick up existing store if exists, otherwise just use base table */\t    $store:= $exists($store) ? $store : $table;\t\t/* for each value in base table, merge with existing and new values */\t/* this code adds each later field-value to the end of an array     */\t/* go through both old and new fields - old or new only: keep, both old and new: append */\t\t    $keys($table).(\t        $key:=$;\t        $base:= $lookup($table, $key);\t        $keep:= $lookup($store, $key);\t        $adds:= $lookup($value, $key);\t        $oldkeys:= $keys($keep);\t        $newkeys:= $keys($adds);\t        $allkeys:=$distinct($append($newkeys, $oldkeys));        \t        $data:= $allkeys.(\t            $k:=$;\t            $k in $newkeys and $k in $oldkeys ?\t                  {$k: $append($lookup($keep, $k), $lookup($adds, $k))}\t                : $k in $oldkeys ? {$k: $lookup($keep, $k)} : {$k: $lookup($adds, $k)}\t            )~>$merge();\t        {$key: $merge([$base, $data])};\t    )\t)","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":870,"y":400,"wires":[["12af8a26d5babc26"]]},{"id":"86a2e7ce31d679ac","type":"delay","z":"227fcbf9d11adcdf","g":"cf6b35b3c3632758","name":"Pause","pauseType":"delay","timeout":"2","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":750,"y":400,"wires":[["1ff33c95115f0cd9"]]},{"id":"42600c9aca65f0cc","type":"change","z":"227fcbf9d11adcdf","g":"cf6b35b3c3632758","name":"SAVE TAB+date","rules":[{"t":"set","p":"solcastTAB","pt":"flow","to":"payload","tot":"msg","dc":true},{"t":"set","p":"solcastAPI.dates","pt":"flow","to":"dates","tot":"msg","dc":true}],"action":"","property":"","from":"","to":"","reg":false,"x":1140,"y":400,"wires":[["0b5a5b7874843c2a"]]},{"id":"e8c557fa5feab56a","type":"change","z":"227fcbf9d11adcdf","g":"cf6b35b3c3632758","name":"TZ+Dates :Start","rules":[{"t":"set","p":"Timezone","pt":"msg","to":"(\t/* April 2024 - DST (tidy Jan 2025) */    \t/* get time range from API calls and pull relevant DST information for use later */\t/* time offset, zone, hhmm will be (a), or (b) if DST change within this range   */\t/* WARNING - this all fails if the API calls fail, so abort write to TAB at end  */\t\t    $times:=(payload.**.period_end).($toMillis()/1000 -1800);\t    $first:=$min($times); $last:=$max($times);\t    $tz:=dst.dst_details[($first>=from.seconds and $first<=upto.seconds) or ($last>=from.seconds and $last<=upto.seconds)];\t    $tz{\t        \"offset_a\": $[0].offset,\t        \"zone_a\":   $[0].timezone.letters,\t        \"hhmm_a\":   $[0].timezone.short,\t        \"uptosec\":  $[0].upto.seconds*1000,\t        \"change\":   $exists($[1]),\t        \"offset_b\": $[1].offset,\t        \"zone_b\":   $[1].timezone.letters,\t        \"hhmm_b\":   $[1].timezone.short   \t        };        \t)","tot":"jsonata"},{"t":"set","p":"dates","pt":"msg","to":"(\t/* April 2024 */\t\t/* get dates for today, yesterday, day before, tomorrow, and day after */\t/* FUNCTION: extract text date from ms + days */\t    $getdate:= function($ms, $ds){ $substringBefore($fromMillis($ms + $ds*86400000),\"T\") };\t\t/* MAIN */\t    $offset:= Timezone.uptosec >= $millis() ? Timezone.offset_a : Timezone.offset_b;\t    \t    $locms:=$millis()+$offset*60000;\t    \t    [-2..2].(\t        $d:=$;\t        {\"date\": $getdate($locms,$d),\t        \"dayis\": [\"old\", \"yes\", \"tod\", \"tom\", \"fut\"][2+$d]}\t        )\t)","tot":"jsonata"},{"t":"set","p":"payload","pt":"msg","to":"(\t/* April 2024 - tidy Jan 2025 */\t/* calculate period start (-30 mins from period_end) and set to local time */\t\t/* if each start time past DST change, use post change details */\t/* use offset as 'hhmm' in $fromMillis to force time to local  */\t/* tranform on 3rd layer object to add period_start and zone   */\t/* also to delete period and period_end as no longer required  */\t\t    $x:=Timezone;\t\t    payload~>|*.*|(\t        $start:=$toMillis(period_end) -1800000; \t        $hhmm:= $start<$x.uptosec ? $x.hhmm_a : $x.hhmm_b;\t        {\"period_start\": $fromMillis($start,'[Y]-[M01]-[D01]T[H01]:[m01]:[s][Z]', $hhmm),\t         \"hhmm\": $hhmm}),\t        [\"period\", \"period_end\"] |;\t\t)","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":360,"y":400,"wires":[["c28fbb08c61c778e"]]},{"id":"77684d8f7e6b11dd","type":"change","z":"227fcbf9d11adcdf","g":"cf6b35b3c3632758","name":"Read TAB","rules":[{"t":"set","p":"store","pt":"msg","to":"solcastTAB","tot":"flow","dc":true},{"t":"delete","p":"auto","pt":"msg"},{"t":"delete","p":"success","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":200,"y":400,"wires":[["e8c557fa5feab56a"]]},{"id":"0e50c92a2586d92b","type":"link in","z":"227fcbf9d11adcdf","g":"cf6b35b3c3632758","name":"Process API","links":["f3b605c9f38ef2cd","884872306405ba16"],"x":105,"y":400,"wires":[["77684d8f7e6b11dd"]]},{"id":"884872306405ba16","type":"link out","z":"227fcbf9d11adcdf","d":true,"g":"cf6b35b3c3632758","name":"Process API","mode":"link","links":["0e50c92a2586d92b"],"x":415,"y":440,"wires":[]},{"id":"2d1d3ac2f675e2f4","type":"comment","z":"227fcbf9d11adcdf","g":"cf6b35b3c3632758","name":"Retain pauses to break the heavy processing into parts","info":"The returned arrays require significant JSONata\nprocessing and will use the single-thread of\nNode-RED for the duration.\nTo permit other processes to work, the array\nprocessing is divided into parts with breaks","x":960,"y":440,"wires":[]},{"id":"0b5a5b7874843c2a","type":"delay","z":"227fcbf9d11adcdf","g":"cf6b35b3c3632758","name":"1min","pauseType":"delay","timeout":"1","timeoutUnits":"minutes","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":1290,"y":400,"wires":[["e7e394cb44066459"]]},{"id":"e7e394cb44066459","type":"link out","z":"227fcbf9d11adcdf","g":"cf6b35b3c3632758","name":"API Call -> Analysis","mode":"link","links":["e28d389109c044a7"],"x":1355,"y":440,"wires":[]},{"id":"12af8a26d5babc26","type":"switch","z":"227fcbf9d11adcdf","g":"cf6b35b3c3632758","name":"MT","property":"payload","propertyType":"msg","rules":[{"t":"nempty"},{"t":"else"}],"checkall":"false","repair":false,"outputs":2,"x":990,"y":400,"wires":[["42600c9aca65f0cc"],[]]},{"id":"c62ecf67018cf1e4","type":"group","z":"227fcbf9d11adcdf","g":"8919a3535559afa6","name":"Add Actuals every half hour - Generate Chart","style":{"label":true,"stroke":"#0070c0","color":"#0070c0","fill":"#e3f3d3"},"nodes":["b9ae819d8c963822","02cc86cb0f8062ed","9e8a5b15a9f0f953","3d170152c4869465","392477d667cddbef","739fe4404128fc7f","0fb9f3358e3ac8f5","61b229269ae12393","ca211fbac88323ef","5f1d7bdc399ff14a","d60fcde274b5ebec","3e588dca918da614","b00a2aad78221867","0c8b875fbf542a08","56b7ea62910becfd","de4ff22adadacefb","6b57e1fbe37f8230","62bb4c685552a1c5","f072c0c551ccc546","17a4973e139bc551","bf9c07785cb00c9b","06c77ce9ab8de874"],"x":54,"y":499,"w":1342,"h":182},{"id":"b9ae819d8c963822","type":"inject","z":"227fcbf9d11adcdf","g":"c62ecf67018cf1e4","name":"At half-hour","props":[],"repeat":"","crontab":"*/30 0-23 * * *","once":false,"onceDelay":0.1,"topic":"","x":170,"y":540,"wires":[["392477d667cddbef"]]},{"id":"02cc86cb0f8062ed","type":"api-get-history","z":"227fcbf9d11adcdf","g":"c62ecf67018cf1e4","name":"PV History","server":"","version":1,"startDate":"","endDate":"","entityId":"sensor.solar_energy","entityIdType":"equals","useRelativeTime":false,"relativeTime":"2 hours","flatten":true,"outputType":"array","outputLocationType":"msg","outputLocation":"payload","x":530,"y":540,"wires":[["9e8a5b15a9f0f953"]],"d":true},{"id":"9e8a5b15a9f0f953","type":"change","z":"227fcbf9d11adcdf","g":"c62ecf67018cf1e4","name":"Parse","rules":[{"t":"set","p":"actual","pt":"msg","to":"(\t/* May 2024 */\t\t/* read returned array and pick out difference over half hour period */\t/* if no change, will be an array of 1 so [0] and [-1] are the same  */\t/* start with kWh, so convert to Watts and round                     */\t\t    $a:=payload[[0, -1]];\t    $lf:= $a[0].last_updated;\t    $lt:= $a[1].last_updated;\t    $v:=($a[1].state.$number() - $a[0].state.$number())*1000 ~>$floor();\t\t\t/* time now, floor to 30 mins, & tz offset as local hh:mm     */\t/* back by 30 minutes to get start of most recent period      */\t/* use date-time to create key to add actual in context array */\t\t    $now:=$floor($millis()/1800000)*1800;\t    $offset:=dst.dst_details[from.seconds<=$now and $now<=upto.seconds].offset;\t    $offset:=$offset-30;    \t    $timeis:=$fromMillis(($now+$offset*60)*1000);\t    \t    $keyis:=$replace($timeis, \"T\", \" \")~>$substring(0,16);\t\t    {\"value\": $v, \"key\": $keyis, \"lastfrom\": $lf, \"lastupto\": $lt};\t)","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":690,"y":540,"wires":[["3d170152c4869465"]]},{"id":"3d170152c4869465","type":"change","z":"227fcbf9d11adcdf","g":"c62ecf67018cf1e4","name":"Add Actual & SAVE TAB","rules":[{"t":"set","p":"store","pt":"msg","to":"solcastTAB","tot":"flow","dc":true},{"t":"set","p":"store","pt":"msg","to":"(\t/* note - for the transform function, the reference must return an object or array based */\t/* on the 'head' which is the FC array, and is the context $ in the lookup expression    */\t    $key:=actual.key;\t    $val:=actual.value;\t    $store:=store;\t    $store ~> |$lookup($,$key)|{\"actual\": $val}|;\t\t)","tot":"jsonata"},{"t":"set","p":"solcastTAB","pt":"flow","to":"store","tot":"msg","dc":true}],"action":"","property":"","from":"","to":"","reg":false,"x":890,"y":540,"wires":[["5f1d7bdc399ff14a"]]},{"id":"392477d667cddbef","type":"change","z":"227fcbf9d11adcdf","g":"c62ecf67018cf1e4","name":"Parms DST+SUN","rules":[{"t":"set","p":"payload","pt":"msg","to":"(\t/* May 2024 */\t/* from 'now' get start and end of last full half-hour period    */\t/* note, for Get History node only need ISO format so can be UTC */\t/* at 11:00, get 10:30 to 11:00 to post at 11:00                 */\t\t    $mpoint:=$floor($millis()/1800000);     /* floor to 30 minutes        */\t    $mpoint:=$mpoint-1;                     /* back 30 minutes            */\t    $mfrom:=$mpoint;                        /* start is 30 minutes before */\t    $mupto:=$mpoint+1;                      /* end is +30 minutes later   */\t\t    {\"startDate\": $fromMillis($mfrom*1800000),\t    \"endDate\": $fromMillis($mupto*1800000)}\t)","tot":"jsonata"},{"t":"set","p":"dst","pt":"msg","to":"solarDST","tot":"flow","dc":true},{"t":"set","p":"Sun","pt":"msg","to":"solarSUN","tot":"flow","dc":true}],"action":"","property":"","from":"","to":"","reg":false,"x":350,"y":540,"wires":[["02cc86cb0f8062ed"]]},{"id":"739fe4404128fc7f","type":"inject","z":"227fcbf9d11adcdf","d":true,"g":"c62ecf67018cf1e4","name":"Manual Periodic","props":[],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":180,"y":640,"wires":[["61b229269ae12393"]]},{"id":"0fb9f3358e3ac8f5","type":"change","z":"227fcbf9d11adcdf","g":"c62ecf67018cf1e4","name":"Today - regular","rules":[{"t":"set","p":"payload","pt":"msg","to":"(\t/* Jun24 half-hourly analysis - get today updated records with latest values */\t/* Nov24 bug fixes, drop peak/off-peak as not going to do this just now      */\t/* Feb25 Improve last-update time                                            */\t\t/* FUNCTION: add 30 minutes to a text time for end of period */\t    $pend:=function($time, $mins){(\t        $a:=$split($time,\":\").$number();\t        $b:=($a[0]*60 + $a[1] + $mins)%1440;\t        $h:=$floor($b/60);\t        $m:=$b-$h*60;\t        $formatInteger($h,\"00:\") & $formatInteger($m,\"00\");\t    )};\t\t/* MAIN */\t    $shade:=Sun.shade;\t    $today:=$substringBefore(dst.now_loc,\"T\");\t\t\t/* look at last two days update history and report */\t    $history:=$distinct(history.msec)[$>$millis()-2*24*3600000].(\t        $m:=$;\t        $a:=$$.history[msec=$m];\t        $aa:=$a[0];\t        $mode:=$distinct($a.type.$substring(0,1));\t        {   \"date\": $substringBefore($aa.time,\"T\"),\t            \"time\": $substringAfter($aa.time,\"T\")~>$substring(0,5),\t            \"msec\": $aa.msec,\t            \"count\": $count($a),\t            \"mode\": \"F\" in $mode ? \"E\" in $mode ? \"Both\" : \"Forecast\" : \"Hindcast\",\t            \"resp\": $join($a.resp.(\"\" & $), \", \"),\t            \"recs\": $distinct($a.recs)}\t    );\t\t\t/* collect basic array for three days, \"yes\", \"tod\", \"tom\" */\t    $dates:= dates[dayis in [\"yes\", \"tod\", \"tom\"]];\t    $darray:=store.*[date in $dates.date and $count(update)>1];\t    $darray:= $darray ~> |$|($d:=date; {\"day\": $dates[date=$d].dayis})|;\t\t/* process today - start with today from table */\t    $todbase:=$darray[day = \"tod\"];\t    $todbase:=store.*[date =$today and $count(update)>1];\t    $todarray:= $todbase.(\t        $rec:=$;\t        $keys($rec).(\t            $key:=$;\t            $val:=$lookup($rec, $key);\t            $res:= $type($val)=\"array\" ? $val[-1] : $val;\t            $contains($key, \"tod\") or $not($contains($key, \"_\")) ? {$key: $res}\t        )~>$merge()\t    );\t\t/* most recent forecast update, get msec and time */\t    $lastup:=$history[mode!=\"Hindcast\"][0]~>|$|{\"time\": $substringBefore(time,\":\") & \":\" & ($substringAfter(time,\":\") <\"30\" ? \"00\" : \"30\")}|;\t    $t:=$number($substringBefore($lastup.time, \":\")) + ($substringAfter($lastup.time, \":\")>\"00\" ? 0.5:0);\t    $lastup:=$lastup~>|$|{\"hour\":$t}|;\t\t    $upto:=$lastup.msec;\t\t    $toddata:=$todarray#$i.(\t        $low:=$round(tod_low/2,0);\t        $med:=$round(tod_med/2,0);\t    /* shade modifier - take low rather than median */          \t        $shd:= time in $shade ? $low : $med;      \t        $hih:=$round(tod_hih/2,0);\t        $act:=actual;\t        {\"time\": time,\t        \"msec\": msec,\t        \"low\": $low,\t        \"shaded\": $shd,        \t        \"median\": $med,\t        \"high\": $hih,\t        \"actual\": $act,\t        \"ratio\": $round(100*$act/$shd),\t        \"upfc\": msec<=$upto,\t        \"upact\": $exists(actual),\t        \"isshaded\": time in $shade\t        });\t\t    $toddata:=$toddata#$i.(\t        $range:=$toddata[[0..$i]];\t        $cl:=$sum($range.low);\t        $cs:=$sum($range.shaded);        \t        $cm:=$sum($range.median);\t        $ch:=$sum($range.high);\t        $ca:=$sum($range.actual);\t        $crat:=$round(100*$ca/$cs,0);\t        $lm:=($cs+$cl)/2;\t        $hm:=($cs+$ch)/2;\t        $x:=$exists(actual) ? $ca<$cl ? \"Low\" : $ca<$lm ? \"Below\" : $ca<$hm ? \"Target\" : $ca<$ch ? \"Above\" : \"High\";\t        $~>|$|{\t            \"cum_low\": $cl,\t            \"cum_shaded\": $cs,            \t            \"cum_median\": $cm,\t            \"cum_high\": $ch,\t            \"cum_actual\": $exists(actual) ? $ca : null,\t            \"cum_ratio\": $exists(actual) ? $crat : null,\t            \"position\": $x\t            }|\t        );\t\t    $times:={\t        \"dayfrom\": $todarray[0].time,\t        \"dayupto\": $pend($todarray[-1].time, 30),\t        \"updated_at\": $lastup.time,\t        \"update_hour\": $lastup.hour,\t        \"actuals_upto\": $pend(($toddata[upact].time)[-1], 30),\t        \"shade\": $shade\t        };\t\t    $totlow:=$sum($toddata.low)/1000~>$round(2);\t    $totshd:=$sum($toddata.shaded)/1000~>$round(2);\t    $totmed:=$sum($toddata.median)/1000~>$round(2);\t    $tothih:=$sum($toddata.high)/1000~>$round(2);    \t    $totact:=$sum($toddata.actual)/1000~>$round(2);\t\t    $peak:=$toddata[median=$max($toddata.median)[0]][0];        \t    $analysis:={\t        \"periods\": $count($toddata),\t        \"shaded\":  $count($shade),\t        \"actuals\": $count($toddata[upact]),\t        \"solar_cum_pc\": ($toddata.cum_ratio[$!=null])[-1],\t        \"solar_day_pc\": 100*$totact/$totshd~>$round(0),\t        \"peakhour\": $peak.time,\t        \"peakpower\": $peak.median*2\t    };\t\t\t    $tnow:=$floor($millis()/1800000);   /* floor to 30 minutes */\t    $thour:=$floor($tnow/2)*2;          /* floor to hour       */\t    $halfhours:=[-1..1].(\t        $i:=$;\t        $d:=$toddata[msec=($i+$tnow)*1800000];\t        $exists($d) ? $d : {\"time\": \"night\", \"isshaded\": false, \"shaded\": 0, \"actual\": 0} );\t    $fullhours:=[-2..3].(\t        $i:=$;\t        $d:=$toddata[msec=($i+$thour)*1800000];\t        $exists($d) ? $d : {\"time\": \"night\", \"isshaded\": false, \"shaded\": 0, \"actual\": 0} );\t    $remain:=$sum($toddata[msec>$tnow*1800000].shaded)/1000~>$round(2);\t\t    $values:={\t    \"fc_low\":    $totlow,\t    \"fc_shaded\": $totshd,    \t    \"fc_median\": $totmed,\t    \"fc_high\":   $tothih,\t    \"act_now\":   $totact,\t    \"remaining\": $exists($remain) ? $remain : 0   \t    };\t\t    $current:={\t        \"time\": $halfhours[1].time,\t        \"isshaded\": $halfhours[1].isshaded,\t        \"this\": $halfhours[1].shaded,\t        \"last\": $halfhours[0].shaded,\t        \"next\": $halfhours[2].shaded,\t        \"hour\": $fullhours[2].time,        \t        \"thishour\": $sum($fullhours[[2..3]].shaded),\t        \"lasthour\": $sum($fullhours[[0..1]].shaded),\t        \"nexthour\": $sum($fullhours[[4..5]].shaded),\t        \"lastactual\": $sum($fullhours[[0..1]].actual)\t\t    };\t\t\t/* final object, for today-forecast */\t    $result:={\"day\": \"today\", \"mode\": \"actuals\", \"date\": $today, \"timestamp\": $now(),\t        \"updates\": $max($todbase.$count(tod_med)),\t        \"uptime\": $lastup.time,\t        \"history\": $history,\t        \"current\": $current,\t        \"values\": $values,\t        \"times\": $times,\t        \"analysis\": $analysis,\t        \"data\": $toddata};\t\t)","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":860,"y":640,"wires":[["06c77ce9ab8de874","d60fcde274b5ebec"]]},{"id":"61b229269ae12393","type":"change","z":"227fcbf9d11adcdf","g":"c62ecf67018cf1e4","name":"Read DST+TAB+SUN","rules":[{"t":"set","p":"dst","pt":"msg","to":"solarDST","tot":"flow","dc":true},{"t":"set","p":"store","pt":"msg","to":"solcastTAB","tot":"flow","dc":true},{"t":"set","p":"Sun","pt":"msg","to":"solarSUN","tot":"flow","dc":true}],"action":"","property":"","from":"","to":"","reg":false,"x":440,"y":640,"wires":[["ca211fbac88323ef"]]},{"id":"ca211fbac88323ef","type":"change","z":"227fcbf9d11adcdf","g":"c62ecf67018cf1e4","name":"R Hist+Dates","rules":[{"t":"set","p":"dates","pt":"msg","to":"solcastAPI.dates","tot":"flow","dc":true},{"t":"set","p":"history","pt":"msg","to":"solcastAPI.history","tot":"flow","dc":true}],"action":"","property":"","from":"","to":"","reg":false,"x":690,"y":640,"wires":[["0fb9f3358e3ac8f5"]]},{"id":"5f1d7bdc399ff14a","type":"delay","z":"227fcbf9d11adcdf","g":"c62ecf67018cf1e4","name":"","pauseType":"delay","timeout":"4","timeoutUnits":"minutes","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":1100,"y":540,"wires":[["de4ff22adadacefb"]]},{"id":"d60fcde274b5ebec","type":"link out","z":"227fcbf9d11adcdf","g":"c62ecf67018cf1e4","name":"Half-Hourly Output","mode":"link","links":["5a1db425bbac4880"],"x":995,"y":640,"wires":[]},{"id":"3e588dca918da614","type":"inject","z":"227fcbf9d11adcdf","d":true,"g":"c62ecf67018cf1e4","name":"Manual NR Chart","props":[],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":180,"y":600,"wires":[["b00a2aad78221867"]]},{"id":"b00a2aad78221867","type":"change","z":"227fcbf9d11adcdf","g":"c62ecf67018cf1e4","name":"Read TAB+SUN","rules":[{"t":"set","p":"store","pt":"msg","to":"solcastTAB","tot":"flow","dc":true},{"t":"set","p":"Sun","pt":"msg","to":"solarSUN","tot":"flow","dc":true}],"action":"","property":"","from":"","to":"","reg":false,"x":420,"y":600,"wires":[["0c8b875fbf542a08"]]},{"id":"0c8b875fbf542a08","type":"change","z":"227fcbf9d11adcdf","g":"c62ecf67018cf1e4","name":"Chart Array","rules":[{"t":"set","p":"payload","pt":"msg","to":"(\t\t    $data:=store.*;\t    $shade:=Sun.shade;\t    $old:=$data.({\"x\": msec, \"y\": old_est[-1]});   \t    $yes:=$data.({\"x\": msec, \"y\": yes_est[-1]});\t    $tod:=$data.({\"x\": msec, \"y\": time in $shade ? tod_low[-1] : tod_med[-1]});\t    $tom:=$data.({\"x\": msec, \"y\": time in $shade ? tom_low[-1] : tom_med[-1]});\t    $fut:=$data.({\"x\": msec, \"y\": time in $shade ? fut_low[-1] : fut_med[-1]});    \t    $act:=$data.({\"x\": msec, \"y\": actual*2});\t    \t    [{\"series\":[\"Older\", \"Yesterday\", \"Today\", \"Tomorrow\", \"Future\", \"Actual\"],\t        \"data\": [[$old], [$yes], [$tod], [$tom], [$fut], [$act]],\t        \"labels\": [\"\"]}];\t\t\t\t)","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":690,"y":600,"wires":[["56b7ea62910becfd"]]},{"id":"56b7ea62910becfd","type":"ui_chart","z":"227fcbf9d11adcdf","g":"c62ecf67018cf1e4","name":"Solcast Forecast","group":"76e876790e22c53e","order":1,"width":0,"height":0,"label":"Solcast","chartType":"line","legend":"true","xformat":"dd HH:mm","interpolate":"cubic","nodata":"","dot":true,"ymin":"","ymax":"","removeOlder":"3","removeOlderPoints":"","removeOlderUnit":"86400","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#9467bd","#ffa424","#2ca02c","#ff9896","#d62728","#ff9896","#9467bd","#98df8a"],"outputs":1,"useDifferentColor":false,"className":"","x":870,"y":600,"wires":[[]],"d":true},{"id":"de4ff22adadacefb","type":"link out","z":"227fcbf9d11adcdf","g":"c62ecf67018cf1e4","name":"Periodic","mode":"link","links":["6b57e1fbe37f8230"],"x":1355,"y":540,"wires":[]},{"id":"6b57e1fbe37f8230","type":"link in","z":"227fcbf9d11adcdf","g":"c62ecf67018cf1e4","name":"Periodic","links":["de4ff22adadacefb"],"x":575,"y":620,"wires":[["ca211fbac88323ef","0c8b875fbf542a08"]]},{"id":"62bb4c685552a1c5","type":"change","z":"227fcbf9d11adcdf","g":"c62ecf67018cf1e4","name":"Chart Array","rules":[{"t":"set","p":"payload","pt":"msg","to":"(\t    $data:=payload.data;\t    [{\"series\":[\"Low\", \"ShadedMedian\", \"High\", \"Actual\"],\t      \"data\": [[$data.$round(cum_low/1000,2)],\t               [$data.$round(cum_shaded/1000,2)],\t               [$data.$round(cum_high/1000,2)],\t               [$data[cum_actual!=null].$round(cum_actual/1000,2)]],\t      \"labels\": [$data.time]}];\t\t)","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":1250,"y":600,"wires":[["f072c0c551ccc546"]]},{"id":"f072c0c551ccc546","type":"ui_chart","z":"227fcbf9d11adcdf","g":"c62ecf67018cf1e4","name":"","group":"76e876790e22c53e","order":1,"width":"14","height":"10","label":"Cumulative Today","chartType":"line","legend":"true","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":true,"ymin":"","ymax":"","removeOlder":1,"removeOlderPoints":"100","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#2ca02c","#ff7f0e","#d62728","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"className":"","x":1270,"y":640,"wires":[[]],"d":true},{"id":"17a4973e139bc551","type":"link in","z":"227fcbf9d11adcdf","g":"c62ecf67018cf1e4","name":"Manual Trigger","links":["27d82ce5a90984bd"],"x":295,"y":620,"wires":[["b00a2aad78221867","61b229269ae12393"]]},{"id":"bf9c07785cb00c9b","type":"link out","z":"227fcbf9d11adcdf","g":"c62ecf67018cf1e4","name":"Half-hourly Trigger","mode":"link","links":["15e1d5168e9395f6"],"x":1115,"y":640,"wires":[]},{"id":"06c77ce9ab8de874","type":"switch","z":"227fcbf9d11adcdf","g":"c62ecf67018cf1e4","name":"@Sun","property":"Sun.elnew > -6","propertyType":"jsonata","rules":[{"t":"true"}],"checkall":"true","repair":false,"outputs":1,"x":1050,"y":600,"wires":[["62bb4c685552a1c5","bf9c07785cb00c9b"]]},{"id":"76e876790e22c53e","type":"ui_group","name":"Solcast FC","tab":"a7de90402f2427f9","order":7,"disp":true,"width":"30","collapse":false,"className":""},{"id":"a7de90402f2427f9","type":"ui_tab","name":"Solar Forecast","icon":"dashboard","order":1,"disabled":false,"hidden":false},{"id":"96e2c279dd9d484a","type":"group","z":"227fcbf9d11adcdf","g":"8919a3535559afa6","name":"Analysis - Forwards, Current, Backwards","style":{"label":true,"stroke":"#0070c0","color":"#0070c0","fill":"#ffbfbf"},"nodes":["57bdfa5b6e83e7e2","3c6a45bac7c7e84c","887585097d75a246","0764005abe6d0bd2","8d5496dd95803f81","49fcc512b3a74d62","e28d389109c044a7","4f9fa55e2307a2ee","9f23b4e89a609bd0","a5dc19a094029f36","57676121591e968e","6e6813d2450b26af","be871b4fda31fba9","547c7ccda88a2b34","1a4af2e230dcac3d","1ad2823d8217ae64","2bd0ea63f3f02855","a69ea30cfee77a55","fa3b729a7437c52a","5420c1cff7d2d78a","a3e5a517ba68c9df","c8e8427cdf7b26ec","15e1d5168e9395f6","b9fdb74572271b19","dfd0ed2e0e8d9007","b16ddd0652d671eb","c057ca115fc44953"],"x":54,"y":759,"w":1332,"h":362},{"id":"57bdfa5b6e83e7e2","type":"inject","z":"227fcbf9d11adcdf","g":"96e2c279dd9d484a","name":"Manual","props":[],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":210,"y":920,"wires":[["3c6a45bac7c7e84c"]]},{"id":"3c6a45bac7c7e84c","type":"change","z":"227fcbf9d11adcdf","g":"96e2c279dd9d484a","name":"Read TAB+Hist+Dates","rules":[{"t":"set","p":"calling","pt":"msg","to":"true","tot":"bool"},{"t":"set","p":"store","pt":"msg","to":"solcastTAB","tot":"flow","dc":true},{"t":"set","p":"history","pt":"msg","to":"solcastAPI.history","tot":"flow","dc":true},{"t":"set","p":"dates","pt":"msg","to":"solcastAPI.dates","tot":"flow","dc":true}],"action":"","property":"","from":"","to":"","reg":false,"x":260,"y":880,"wires":[["4f9fa55e2307a2ee"]]},{"id":"887585097d75a246","type":"change","z":"227fcbf9d11adcdf","g":"96e2c279dd9d484a","name":"Analysis Prep","rules":[{"t":"set","p":"Table","pt":"msg","to":"(\t/* table: get only periods with an update, and for yesterday, today, and tomorrow */\t\t    $base:=store.*[$count(update)>1];\t    dates[dayis in [\"yes\", \"tod\", \"tom\"]].(\t        $date:=$.date;\t        {\"dayis\": $.dayis, \"date\": $date, \"table\": $base[date=$date]}\t        )\t)","tot":"jsonata"},{"t":"set","p":"History","pt":"msg","to":"(\t/* get update history base array, and date-time update reference array */\t/* Dec 2024 - align update time to the half hour rather than the hour  */\t\t    $hbase:= history~>|$|(\t        $t:=$substringAfter(time,\"T\");\t        $h:=$substringBefore($t,\":\");\t        $m:=$substring($t,3,2);\t        {\t        \"date\": $substringBefore(time,\"T\"),\t        \"hour\": $h,\t        \"mins\": $m<\"30\" ? \"00\": \"30\",\t        \"mode\": $contains(type, \"F\") ? \"Fore\" : \"Hind\"\t        })|;\t        \t    dates.(\t        $date:=$.date;\t        $dayis:=$.dayis;\t        $hist:=$hbase[date=$date];\t        $events:=$distinct($hist.msec)^($);\t        $events.(\t            $msec:=$;\t            $api:=$hist[msec=$msec];\t            $one:=$api[0];\t            $modes:=$join($api.mode, \":\");\t            $resps:=$join($api.(\"\" & resp), \":\");\t            {\"date\": $date,\t            \"dayis\": $dayis,\t            \"utime\": $one.hour & \":\" & $one.mins,\t            \"hour\": $number($one.hour) + ($one.mins>\"00\" ? 0.5 : 0),\t            \"msec\": $one.msec,\t            \"count\": $count($api),\t            \"modes\": $contains($modes, \"F\") ? $contains($modes, \"H\") ? \"Mixed\" : \"Forecast\" : \"Hindcast\",\t            \"response\": $resps,\t            \"records\": $one.recs,\t            \"usedup\": $one.used,\t            \"state\": false in $api.resp.($=200) ? \"Fail\" : \"Pass\",\t            \"outcome\": $one.stat}\t            )\t        );\t\t)","tot":"jsonata"},{"t":"move","p":"dates","pt":"msg","to":"Dates","tot":"msg"},{"t":"delete","p":"dst","pt":"msg"},{"t":"delete","p":"store","pt":"msg"},{"t":"delete","p":"history","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":560,"y":800,"wires":[["8d5496dd95803f81"]]},{"id":"0764005abe6d0bd2","type":"change","z":"227fcbf9d11adcdf","g":"96e2c279dd9d484a","name":"Tomorrow [X]","rules":[{"t":"set","p":"fc_tomorrow","pt":"msg","to":"(\t\t/* FUNCTION: return date for given day-name eg \"tom\" */\t    $dates:=Dates;\t    $dateofday:=function($name){$dates[dayis=$name].date};\t\t/* FUNCTION: return a forecast record with one value-set by update-index number */\t    $recgroup:=function($data, $ind){(\t        $data.(\t            $rec:=$;\t            $keys($rec).(\t                $k:=$;\t                $v:=$lookup($rec, $k);\t                {$k: $type($v)=\"array\" ? $v[$ind] : $v}\t            )~>$merge()\t        ) )};\t\t\t/* TOMORROW: a forecast, but updated several times today   */\t\t/* today's update events, and tomorrow's forecast records  */\t    $todupfc:=History[dayis=\"tod\" and modes=\"Forecast\"];\t    $tomrecfc:=Table[dayis=\"tom\"].table.{\"time\": time, \"low\": tom_low, \"median\": tom_med, \"high\": tom_hih};\t\t\t/* by each forecast update, group the forecast data set at that time */\t    $data:=$todupfc#$i.(\t        $recs:=$recgroup($tomrecfc, $i);\t        {\"group\": $i+1,\t        \"update\": $,\t        \"totlow\": $round($sum($recs.low)/2000,2),        \t        \"totmedian\": $round($sum($recs.median)/2000,2),\t        \"tothigh\": $round($sum($recs.high)/2000,2),\t        \"array\": $recs}\t        );\t\t/* final object, for tomorrow-forecast */\t    $result:={\"day\": \"tomorrow\", \"mode\": \"forecast\", \"date\": $dateofday(\"tom\"), \"timestamp\": $now(),\t    \"fc_low\": ($data.totlow)[-1],\t    \"fc_median\": ($data.totmedian)[-1],\t    \"fc_high\": ($data.tothigh)[-1],\t    \"updates\": $count($todupfc),\t    \"uphour\": $data[-1].update.hour,\t    \"data\": $data};\t\t\t\t\t)","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":790,"y":900,"wires":[["57676121591e968e"]]},{"id":"8d5496dd95803f81","type":"change","z":"227fcbf9d11adcdf","g":"96e2c279dd9d484a","name":"Today [X]","rules":[{"t":"set","p":"fc_today","pt":"msg","to":"(\t\t/* FUNCTION: return date for given day-name eg \"tom\" */\t    $dates:=Dates;\t    $dateofday:=function($name){$dates[dayis=$name].date};\t\t/* FUNCTION: return a forecast record with one update value-set by index number */\t/*           will only add 'actual' for the period upto & inc the update time   */\t    $recgroup:=function($data, $ind, $msec){(\t        $data.(\t            $rec:=$;\t            $tim:=$rec.msec;\t            $keys($rec).(\t                $key:=$;\t                $val:=$lookup($rec, $key);\t                $len:=$count($val)-1;\t                $res:= $type($val)=\"array\" ? $ind>$len ? $val[-1] : $val[$ind] : $val;\t                $key!=\"actual\" or $tim<=$msec ? {$key: $res}\t            )~>$merge()\t        ) )};\t\t/* TODAY: a forecast updated during the day */\t/* today's update events, and days's forecast records - include only successful updates  */\t    $todupfc:=History[dayis=\"tod\" and modes!=\"Hindcast\" and state=\"Pass\"];\t    $todrecfc:=Table[dayis=\"tod\"].table.{\"time\": time, \"msec\": msec, \"low\": tod_low, \"median\": tod_med, \"high\": tod_hih, \"actual\": actual};\t\t/* by each forecast update, group the forecast data set at that time */\t    $data:=$todupfc#$i.(\t        $recs:=$recgroup($todrecfc, $i, $todupfc[$i].msec);\t        {\"group\": $i+1,\t        \"update\": $,\t        \"totlow\": $round($sum($recs.low)/2000,2),        \t        \"totmedian\": $round($sum($recs.median)/2000,2),\t        \"tothigh\": $round($sum($recs.high)/2000,2),\t        \"act_toupdate\": ($x:=$round($sum($recs.actual)/1000,2); $exists($x) ? $x : 0),\t        \"array\": $recs}\t        );\t\t    $latest:=$recgroup($todrecfc, $count($todupfc), $millis());\t\t/* final object, for today-forecast */\t    $result:={\"day\": \"today\", \"mode\": \"forecast\", \"date\": $dateofday(\"tod\"), \"timestamp\": $now(),\t    \"fc_low\": ($data.totlow)[-1],\t    \"fc_median\": ($data.totmedian)[-1],\t    \"fc_high\": ($data.tothigh)[-1],\t    \"updates\": $count($todupfc),\t    \"uphour\": $data[-1].update.hour,\t    \"actual\": ($data.act_toupdate)[-1],\t    \"data\": $data,\t    \"latest\": $latest};\t\t)","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":720,"y":800,"wires":[["c8e8427cdf7b26ec"]]},{"id":"49fcc512b3a74d62","type":"change","z":"227fcbf9d11adcdf","g":"96e2c279dd9d484a","name":"Pre-Today (tomorrow yesterday)","rules":[{"t":"set","p":"fc_todayest","pt":"msg","to":"(\t/* Analysis: Today - advance from tomorrow-yesterday */\t\t    $dates:=Dates;\t\t/* FUNCTION: return date for given day-name eg \"tom\" */\t    $dateofday:=function($name){$dates[dayis=$name].date};\t\t/* FUNCTION: return a forecast record with one value-set by update-index number */\t    $recgroup:=function($data, $ind){(\t        $data.(\t            $rec:=$;\t            $keys($rec).(\t                $k:=$;\t                $v:=$lookup($rec, $k);\t                {$k: $type($v)=\"array\" ? $v[$ind] : $v}\t            )~>$merge()\t        ) )};\t\t\t/* TOMORROW-YESTERDAY: what today looked like yesterday using the last update of the day */\t/* 03/25 - should be using data (for tomorrow) from 'today' with yesterdays updates      */\t\t    $tyrecfc:=Table[dayis=\"tod\"].table.{\"time\": time, \"msec\": msec, \"low\": tom_low, \"median\": tom_med, \"high\": tom_hih};\t    $yesupfc:=History[dayis=\"yes\" and modes=\"Forecast\"];\t\t/* last update should be count of updates, but if some missing use count of table records */    \t    $updates:=$count($yesupfc);      /* Jan 25 remove the -1 as I now think this is wrong */\t    $records:=$tyrecfc.$count(median)~>$max();\t    $i:=$min([$updates, $records])-1;\t\t    $data:=$yesupfc[$i].(\t        $recs:=$recgroup($tyrecfc, $i);\t        {\"group\": $i+1,\t        \"update\": $,\t        \"totlow\": $round($sum($recs.low)/2000,2),        \t        \"totmedian\": $round($sum($recs.median)/2000,2),\t        \"tothigh\": $round($sum($recs.high)/2000,2),\t        \"array\": $recs}\t        );\t\t\t    $tomyes:={\"day\": \"tom-yes\", \"mode\": \"forecast\", \"date\": $dateofday(\"yes\"), \"timestamp\": $now(),\t    \"fc_low\": ($data.totlow)[-1],\t    \"fc_median\": ($data.totmedian)[-1],\t    \"fc_high\": ($data.tothigh)[-1],\t    \"updates\": $count($yesupfc),\t    \"uphour\": $data[-1].update.hour,\t    \"data\": $data};\t\t\t\t)","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":850,"y":1000,"wires":[["a3e5a517ba68c9df"]]},{"id":"e28d389109c044a7","type":"link in","z":"227fcbf9d11adcdf","g":"96e2c279dd9d484a","name":"API Call -> Analysis Trigger","links":["e7e394cb44066459"],"x":95,"y":840,"wires":[["9f23b4e89a609bd0"]]},{"id":"4f9fa55e2307a2ee","type":"change","z":"227fcbf9d11adcdf","g":"96e2c279dd9d484a","name":"Read SUN","rules":[{"t":"set","p":"Sun","pt":"msg","to":"solarSUN","tot":"flow","dc":true},{"t":"delete","p":"payload","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":370,"y":840,"wires":[["887585097d75a246"]]},{"id":"9f23b4e89a609bd0","type":"change","z":"227fcbf9d11adcdf","g":"96e2c279dd9d484a","name":"Table","rules":[{"t":"move","p":"payload","pt":"msg","to":"store","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":210,"y":840,"wires":[["4f9fa55e2307a2ee"]]},{"id":"a5dc19a094029f36","type":"delay","z":"227fcbf9d11adcdf","g":"96e2c279dd9d484a","name":"","pauseType":"delay","timeout":"2","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":580,"y":900,"wires":[["0764005abe6d0bd2"]]},{"id":"57676121591e968e","type":"delay","z":"227fcbf9d11adcdf","g":"96e2c279dd9d484a","name":"","pauseType":"delay","timeout":"2","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":620,"y":940,"wires":[["547c7ccda88a2b34"]]},{"id":"6e6813d2450b26af","type":"link out","z":"227fcbf9d11adcdf","g":"96e2c279dd9d484a","name":"Output Periodic","mode":"link","links":["78ad3dff23094999"],"x":1315,"y":1080,"wires":[]},{"id":"be871b4fda31fba9","type":"delay","z":"227fcbf9d11adcdf","g":"96e2c279dd9d484a","name":"","pauseType":"delay","timeout":"2","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":580,"y":1000,"wires":[["49fcc512b3a74d62"]]},{"id":"547c7ccda88a2b34","type":"change","z":"227fcbf9d11adcdf","g":"96e2c279dd9d484a","name":"Updates-Analysis [->]","rules":[{"t":"set","p":"fc_updates","pt":"msg","to":"(\t    fc_today.data.(\t        $low:=totlow;\t        $med:=totmedian;\t        $hih:=tothigh;\t        $act:=act_toupdate;   \t        $range:=$hih-$low;\t        $mean:=($hih+$low)/2;\t        $sigma:=$range/2.5;\t        {\t            \"update\": update.utime,\t            \"hour\": update.hour,\t            \"state\": update.state,\t            \"low\": $low, \"median\": $med, \"high\": $hih,\t            \"actual\": $act,\t            \"range\": $range~>$round(2),            \t            \"mean\": $mean~>$round(2),\t            \"sigma\": $sigma~>$round(2),\t            \"npskew\": ($mean-$med)/$sigma~>$round(2)\t            };\t        )\t        \t)","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":820,"y":940,"wires":[["1a4af2e230dcac3d"]]},{"id":"1a4af2e230dcac3d","type":"change","z":"227fcbf9d11adcdf","g":"96e2c279dd9d484a","name":"History","rules":[{"t":"set","p":"fc_history","pt":"msg","to":"History[dayis in [\"yes\", \"tod\"]]^(>msec)","tot":"jsonata"},{"t":"set","p":"apiCallsToday","pt":"msg","to":"fc_history[dayis=\"tod\"]~>$count()","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":1000,"y":940,"wires":[["be871b4fda31fba9"]]},{"id":"1ad2823d8217ae64","type":"change","z":"227fcbf9d11adcdf","g":"96e2c279dd9d484a","name":"Clear down fields","rules":[{"t":"delete","p":"Table","pt":"msg"},{"t":"delete","p":"History","pt":"msg"},{"t":"delete","p":"Dates","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1190,"y":1080,"wires":[["6e6813d2450b26af"]]},{"id":"2bd0ea63f3f02855","type":"change","z":"227fcbf9d11adcdf","g":"96e2c279dd9d484a","name":"Chart Array (updates)","rules":[{"t":"set","p":"payload","pt":"msg","to":"(\t    $data:=fc_today.data;\t    $latest:=fc_today.latest;\t\t    $series:= $append(\"Actual: \" & $latest[$exists(actual)][-1].time, $data.update.(\"Update: \" & utime));\t    $plots:=  $append([[$latest.{\"x\": msec, \"y\": actual*2}]],\t                      $data.[(array.{\"x\": msec, \"y\": median})]);\t    [{\"series\": [$series],\t        \"data\": [$plots],\t        \"labels\": [\"\"]}];\t\t)","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":1080,"y":840,"wires":[["a69ea30cfee77a55"]]},{"id":"a69ea30cfee77a55","type":"ui_chart","z":"227fcbf9d11adcdf","g":"96e2c279dd9d484a","name":"Updates Today","group":"76e876790e22c53e","order":1,"width":"16","height":"11","label":"Updates Today","chartType":"line","legend":"true","xformat":"dd HH:mm","interpolate":"cubic","nodata":"","dot":true,"ymin":"","ymax":"","removeOlder":"1","removeOlderPoints":"","removeOlderUnit":"86400","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#9467bd","#ffa424","#2ca02c","#ff9896","#d62728","#ff9896","#9467bd","#98df8a"],"outputs":1,"useDifferentColor":false,"className":"","x":1280,"y":840,"wires":[[]],"d":true},{"id":"fa3b729a7437c52a","type":"link in","z":"227fcbf9d11adcdf","g":"96e2c279dd9d484a","name":"Manual Trigger","links":["27d82ce5a90984bd"],"x":95,"y":880,"wires":[["3c6a45bac7c7e84c"]]},{"id":"5420c1cff7d2d78a","type":"change","z":"227fcbf9d11adcdf","g":"96e2c279dd9d484a","name":"Yesterday (Hindcast/Actual/Forecast/Summary)","rules":[{"t":"set","p":"_x","pt":"msg","to":"(\t\t/* FUNCTION: return date for given day-name eg \"tom\" */\t    $dates:=Dates;\t    $dateofday:=function($name){$dates[dayis=$name].date};\t\t/* FUNCTION: return a forecast record with one value-set by update-index number */\t/*           Jan 25, extra argument to switch array[index] to array[index|-1]   */\t\t    $recgroup:=function($data, $ind, $run){(\t        $data.(\t            $rec:=$;\t            $keys($rec).(\t                $k:=$;\t                $v:=$lookup($rec, $k);\t                $i:= $type($v)!=\"array\" ? 0 : $not($run) ? $ind : $ind<$count($v) ? $ind : -1;\t                {$k: $v[$i] }\t            )~>$merge()\t        ) )};\t\t/* YESTERDAY - look back at yesterday to generate full analysis */\t\t/* - a hindcast, estimates for yesterday, assume updated once (today) */\t/* - a forecast, all the forecasts that were generated yesterday      */\t\t/* HINDCAST */\t/* today's update events, and yesterday's hindcast records */\t    $toduphc:=History[dayis=\"tod\" and modes=\"Hindcast\"];\t    $yesrechc:=Table[dayis=\"yes\"].table.{\"time\": time, \"est\": yes_est, \"ewh\": $round(yes_est/2,0), \"act\": actual};\t    $yesrechc:= $yesrechc ~> |$|{\"diff\": act-ewh}|;\t\t/* by each hindcast update, group the hindcast data set at that time */\t    $data_hc:=$toduphc#$i.(\t        $recs:=$recgroup($yesrechc, $i, false);\t        {\"group\": $i+1,\t        \"update\": $,\t        \"estimate\": $round($sum($recs.est)/2000,2),\t        \"array\": $recs}\t        );\t\t/* final object, for yesterday-hindcast */\t    $est:=($data_hc.estimate)[-1];\t    $act_hc:=$round($sum($data_hc.array.act)/1000,2);\t\t    $result_HC:={\"day\": \"yesterday\", \"mode\": \"hindcast\", \"date\": $dateofday(\"yes\"), \"timestamp\": $now(),\t    \"fc_est\": $est,\t    \"fc_act\": $act_hc,\t    \"ratio\": $round(100*$act_hc/$est,0),\t    \"updates\": $count($toduphc),\t    \"uphour\": $data_hc[-1].update.hour,\t    \"data\": $data_hc};\t\t/* FORECASTS for yesterday */\t/* yesterday's update events, and yesterday's forecast records. Apply sun shade */\t    $shade:=Sun.shade;\t    $yesupfc:=History[dayis=\"yes\" and modes=\"Forecast\"];\t    $yesrecfc:=Table[dayis=\"yes\"].table.{\"time\": time, \"low\": tod_low, \"median\": tod_med, \"high\": tod_hih, \"actual\": actual, \"shaded\": time in $shade ? tod_low : tod_med};\t\t/* by each forecast update, group the forecast data set at that time */\t    $data_fc:=$yesupfc#$i.(\t        /* for each index, pick the index median for forecast, or the last one if index past end of array */\t        $recs:=$recgroup($yesrecfc, $i, true);\t        {\"group\": $i+1,\t        \"update\": $,\t        \"totlow\": $round($sum($recs.low)/2000,2),        \t        \"tothigh\": $round($sum($recs.high)/2000,2),\t        \"totmed\": $round($sum($recs.median)/2000,2),\t        \"shaded\": $round($sum($recs.shaded)/2000,2),\t        \"actual\": $round($sum($recs.actual)/1000,2),\t        \"array\": $recs}\t        );\t\t/* final object, for yesterday-forecasts */\t    $shd:=$data_fc.shaded;\t    $act:=$data_fc.actual;\t    $ratio:=$shd.$round(100*$act[0]/$);\t    $result_FC:={\"day\": \"yesterday\", \"mode\": \"forecast\", \"date\": $dateofday(\"yes\"), \"timestamp\": $now(),\t    \"median\": $data_fc.totmed,\t    \"shaded\": $data_fc.shaded,\t    \"actual\": $data_fc.actual,\t    \"ratio\": $ratio,\t    \"updates\": $count($yesupfc),\t    \"uphour\": $data_fc[-1].update.hour,\t    \"data\": $data_hc};\t\t\t/* compute the summary values and ratios */\t\t/* FUNCTION: ratio as percentage */\t    $topc:=function($rat){$round($rat*100,0)};\t\t    $actual:=$act_hc;\t    $hindcast:=$est;\t    $shaded:=$average($data_fc.shaded)~>$round(2);\t    $shadedfirst:=($data_fc.shaded)[0]~>$round(2);\t    $avfc:=$average($data_fc.totmed)~>$round(2);\t    $shadeRatio:=$shaded/$avfc;\t    $shadeHC:=$round($shadeRatio * $hindcast,2);\t\t    $ratios:={\t        \"date\": $result_HC.date,\t        \"actual\": $actual,\t        \"av_fc\": $avfc,\t        \"av_shaded\": $shaded,\t        \"first_shaded\": $shadedfirst,\t        \"shade_ratio\": $topc($shadeRatio),        \t        \"hindcast\": $hindcast,    \t        \"shaded_hc\": $shadeHC,\t        \"FCHC_ratio\": $topc($avfc/$hindcast),\t        \"actualFC_ratio\": $topc($actual/$avfc),\t        \"actualSFC_ratio\": $topc($actual/$shaded),\t        \"actualFSFC_ratio\": $topc($actual/$shadedfirst),\t        \"actualHC_ratio\": $topc($actual/$hindcast),\t        \"actualSHC_ratio\": $topc($actual/$shadeHC) };\t\t/* output */\t\t    {\"fc_yesterday\": $result_HC, \"fc_yesterday_forecast\": $result_FC, \"ratios\": $ratios};\t\t\t\t)","tot":"jsonata"},{"t":"set","p":"fc_yesterday","pt":"msg","to":"_x.fc_yesterday","tot":"msg","dc":true},{"t":"set","p":"fc_yesterday_forecast","pt":"msg","to":"_x.fc_yesterday_forecast","tot":"msg","dc":true},{"t":"set","p":"fc_summary","pt":"msg","to":"_x.ratios","tot":"msg","dc":true},{"t":"delete","p":"_x","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":900,"y":1040,"wires":[["1ad2823d8217ae64"]]},{"id":"a3e5a517ba68c9df","type":"delay","z":"227fcbf9d11adcdf","g":"96e2c279dd9d484a","name":"","pauseType":"delay","timeout":"2","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":640,"y":1040,"wires":[["5420c1cff7d2d78a"]]},{"id":"c8e8427cdf7b26ec","type":"switch","z":"227fcbf9d11adcdf","g":"96e2c279dd9d484a","name":"@API","property":"$exists(calling)","propertyType":"jsonata","rules":[{"t":"jsonata_exp","v":"true","vt":"jsonata"},{"t":"true"}],"checkall":"true","repair":false,"outputs":2,"x":850,"y":840,"wires":[["2bd0ea63f3f02855"],["a5dc19a094029f36"]]},{"id":"15e1d5168e9395f6","type":"link in","z":"227fcbf9d11adcdf","g":"96e2c279dd9d484a","name":"Half-hourly Trigger","links":["bf9c07785cb00c9b"],"x":95,"y":800,"wires":[["b9fdb74572271b19"]]},{"id":"b9fdb74572271b19","type":"change","z":"227fcbf9d11adcdf","g":"96e2c279dd9d484a","name":"clean msg - half-hourly trigger (day)","rules":[{"t":"delete","p":"payload","pt":"msg"},{"t":"delete","p":"actual","pt":"msg"},{"t":"delete","p":"calling","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":300,"y":800,"wires":[["887585097d75a246"]]},{"id":"dfd0ed2e0e8d9007","type":"comment","z":"227fcbf9d11adcdf","g":"96e2c279dd9d484a","name":"Every API & half-hour daytime","info":"","x":1020,"y":800,"wires":[]},{"id":"b16ddd0652d671eb","type":"comment","z":"227fcbf9d11adcdf","g":"96e2c279dd9d484a","name":"Every API","info":"","x":580,"y":860,"wires":[]},{"id":"c057ca115fc44953","type":"comment","z":"227fcbf9d11adcdf","g":"96e2c279dd9d484a","name":"Date: Published @ 2025-03-25T14:14:25.098Z","info":"code cleaned - ready for publication","x":280,"y":1040,"wires":[]},{"id":"8c7f0429158e22f4","type":"group","z":"227fcbf9d11adcdf","g":"8919a3535559afa6","name":"Solar Tracking and Shading","style":{"stroke":"#ffC000","label":true,"color":"#6f2fa0","fill":"#ffffbf"},"nodes":["f85373788f5d2d87","1295713979d873a5","fbf9801d4b66d7e3","75b6e39a2fefc68d","0dc092890c747c86","1137d7686528f79e","825c7d2c9c3b7041","b1e066477e25c6ea"],"x":54,"y":1419,"w":1332,"h":82},{"id":"f85373788f5d2d87","type":"debug","z":"227fcbf9d11adcdf","g":"8c7f0429158e22f4","name":"Sun","active":true,"tosidebar":false,"console":false,"tostatus":true,"complete":"\"Az \" & sun.aznew & \" El \" & sun.elnew","targetType":"jsonata","statusVal":"az","statusType":"auto","x":470,"y":1460,"wires":[]},{"id":"1295713979d873a5","type":"server-state-changed","z":"227fcbf9d11adcdf","g":"8c7f0429158e22f4","name":"Sun Update","server":"","version":6,"outputs":1,"exposeAsEntityConfig":"","entities":{"entity":["sun.sun"],"substring":[],"regex":[]},"outputInitially":true,"stateType":"str","ifState":"","ifStateType":"str","ifStateOperator":"is","outputOnlyOnStateChange":false,"for":"0","forType":"num","forUnits":"minutes","ignorePrevStateNull":false,"ignorePrevStateUnknown":false,"ignorePrevStateUnavailable":false,"ignoreCurrentStateUnknown":false,"ignoreCurrentStateUnavailable":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"#:(persist)::solarSUN","valueType":"flow"},{"property":"sun","propertyType":"msg","value":"(\t/* FUNCTION: localtime \"hh:mm\" from a utc timestamp */\t    $loctime:=function($ts, $add){(\t        $fromMillis($toMillis($ts)+$add*1000)~>$substring(11,5)\t        )};\t        \t    $timeutc:=$entities('sensor.date_time_utc').state;\t    $timeiso:=$entities('sensor.date_time_iso').state;\t    \t    $utcsec:=$toMillis($replace($timeutc, \", \", \"T\") & \":00\")/1000;\t    $isosec:=$toMillis($timeiso)/1000;\t    $offset:=$isosec-$utcsec;\t    \t    $old:=$prevEntity().attributes;\t    $new:=$entity().attributes;\t       \t    {\t        \"time\": $substring($timeiso,11,5),\t        \"tutc\": $substring($timeutc,12,5),\t        \"tzoff\": $offset,\t        \"state\": $entity().state,\t        \"going\": $new.rising ? \"rise\": \"fall\",\t        \"rises\": $loctime($new.next_rising, $offset),\t        \"sets\":  $loctime($new.next_setting, $offset),\t        \"noon\": $loctime($new.next_noon, $offset),\t        \"solarnoon\": $loctime($new.next_noon, 0),\t        \"aznew\": $new.azimuth,\t        \"azold\": $old.azimuth,\t        \"elnew\": $new.elevation,\t        \"elold\": $old.elevation\t    };\t    \t)","valueType":"jsonata"}],"x":150,"y":1460,"wires":[["fbf9801d4b66d7e3","f85373788f5d2d87"]],"d":true},{"id":"fbf9801d4b66d7e3","type":"switch","z":"227fcbf9d11adcdf","g":"8c7f0429158e22f4","name":"Init solarSUN","property":"track","propertyType":"msg","rules":[{"t":"jsonata_exp","v":"$not($exists(payload))","vt":"jsonata"},{"t":"jsonata_exp","v":"sun.aznew != sun.azold","vt":"jsonata"}],"checkall":"false","repair":false,"outputs":2,"x":630,"y":1460,"wires":[["75b6e39a2fefc68d"],["0dc092890c747c86"]]},{"id":"75b6e39a2fefc68d","type":"change","z":"227fcbf9d11adcdf","g":"8c7f0429158e22f4","name":"Load Horizon","rules":[{"t":"set","p":"htext","pt":"msg","to":"[\"10 10 12 14 16 18 18 15 18 12 12 12 14 12 12 06 08 10\",\"10 10 12 14 16 18 18 15 18 12 12 12 14 12 12 06 08 10\",\"10 10 12 14 16 18 18 15 18 12 12 12 14 12 12 06 08 10\",\"10 10 12 14 16 18 18 15 18 12 12 12 14 12 12 06 08 10\"]","tot":"json"},{"t":"set","p":"payload","pt":"msg","to":"(\t/* creates new solar tracking array of 360 elements */\t/* adds horizon to each azimuth from supplied text  */\t/* NOTE: array count must be integer factor of 360  */\t\t    $hoz:=htext.($split($,\" \").$number());\t\t    $inc:=360/$count($hoz);\t    $hoz:=$append($hoz, $hoz[0]);\t    $fill:=[0..$inc-1];\t    \t    $track:=$hoz#$i.(\t        $a:=$;\t        $b:=$hoz[$i+1];\t        $fill#$j.(\t            $az:=$i*$inc+$j;\t            $ft:=$az*4;\t            $m:=$ft%60;\t            $ft:=$formatInteger(($ft-$m)/60,'00:') & $formatInteger($m,'00');\t            {\"azimuth\": $az,     \t            \"horizon\": $round($a+($b-$a)*$j/$inc,0),\t            \"fixedtime\": $ft,\t            \"elevation\": -1\t            });\t        )[[0..359]];\t\t    sun ~> |$|{\"track\": $track, \"shade\": []}|;\t\t)","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":810,"y":1460,"wires":[["0dc092890c747c86"]]},{"id":"0dc092890c747c86","type":"change","z":"227fcbf9d11adcdf","g":"8c7f0429158e22f4","name":"Update SUN","rules":[{"t":"set","p":"payload","pt":"msg","to":"(\t/* update the track array with elevation, shade, and clock time  */\t/* August 2024 - cope with irregular sun update during the night */\t\t/* update integer elevation at the new integer azimuth record(s) */\t\t    $sun:=sun;\t    $track:=payload.track;\t    $time:=sun.time;\t\t    $newaz:=$round($sun.aznew,0)%360;\t    $newel:=$round($sun.elnew,0);    \t    $oldaz:=$round($sun.azold,0)%360;\t    $oldel:=$round($sun.elold,0);\t\t/* if change is 0, then force last record as prior and update anyway  */\t    $oldaz:= $oldaz=$newaz ? ($oldaz +359)%360 : $oldaz;\t\t/* change in azimuth is 1 in the daytime but assume can be 0 to many */\t    $deltaaz:=(360+$newaz-$oldaz)%360;\t\t    $start:=0;\t    $end:=359;\t\t    $newfrom:=($oldaz+1)%360;\t    $newupto:=$newaz;\t/* if array [] set to wrap mode and extend array past end */\t    $mode:= $newupto<$newfrom ? \"wrap\" : \"norm\";\t    $newupto:= $mode=\"wrap\" ? $newupto+360 : $newupto;\t    $newpatch:=[$newfrom..$newupto];\t\t/* from the last azimuth to the new azimuth, recreate this bit of the array   */\t/* where the span wraps around from 359 back to 0, just carry on in one block */ \t\t\t    $new:=$newpatch#$i.(\t        $az:=$;\t        $el:=$round($oldel+($newel-$oldel)*($i+1)/$deltaaz,0);\t        $track[$az%360] ~> |$|{\"clocktime\": $time, \"elevation\": $el, \"shade\": $el>=0 and $el<=horizon}|\t    );\t\t\t\t/* for norm mode, re-build array as: (front)  new    (back)      */\t/* for wrap mode, re-build array as: new-tail middle (new-front) */\t    $front:= $newfrom=0 ? [] : [$start..$oldaz];\t    $middle:=[$newaz+1..$oldaz];\t    $back:=  [$newaz+1..$end];\t    \t    $newarray:= $mode=\"norm\" ? $append($track[$front], $new)~>$append($track[$back])\t                             : $append($new[azimuth<180], $track[$middle])~>$append($new[azimuth>180]);\t\t\t    $x:=$sun~>|$|{\"track\": $newarray}|;\t\t   \t\t/* this bit of code is just for testing and debugging */\t{\t \"last-rec\": $oldaz,\t \"last-el\": $oldel,\t \"new-rec \": $newaz,\t \"new_el\": $newel,\t \"increment\": $deltaaz,\t \"mode\": $mode,\t \"front\": \"\" & $front[[0,-1]],\t \"newpatch\": \"\" & $newpatch[[0,-1]],\t \"newrecs\": \"\" & $new.azimuth[],\t \"middle\": \"\" & $middle[[0,-1]],\t \"back\" : \"\" & $back[[0,-1]],\t \"results\": $count($newarray),\t \"correct\": \t  $not(false in $newarray#$i.(  $back := $i=359 ? $.azimuth=359;\t    $middle := $i>0 ? $.azimuth = $newarray[$i-1].azimuth+1 : $.azimuth=0 )),\t \"changes\": \t  $x.track#$i.(\t      $track[$i]!=$ ? {\"i\": $i, \"was\": $track[$i], \"now\": $}  )\t};\t\t    $x\t\t)","tot":"jsonata"},{"t":"set","p":"payload","pt":"msg","to":"(\t/* compute shading time array - if shaded during 30 minute periods */\t\t    $spc:=50;  /* percent of shaded times in period to trigger report */\t\t    $track:=payload.track;\t    $newaz:=$round(payload.aznew);\t    \t    $array:=$track[elevation>=0 and clocktime != null].(\t        $x:=$split(clocktime,\":\").$number();\t        $mins:=$x[0]*60+$x[1];\t        $period:=$floor($mins/30);\t        {\"azimuth\": azimuth,\t        \"period\": $floor($mins/30),\t        \"shade\": shade});\t        \t    $shade:=$distinct($array[shade].period).(\t        $period:=$;\t        $range:=$array[period=$period];\t        $round($count($range[shade])*100/$count($range),-1)>$spc ?\t            ($x:=$period*30;\t            $m:=$x%60;\t            $formatInteger(($x-$m)/60,'00') & \":\" & $formatInteger($m,'00')\t            ) );\t            \t    payload~>|$|{\"shade\": $shade, \"isshade\": $array[azimuth=$newaz].shade}|;\t      \t)","tot":"jsonata"},{"t":"set","p":"solarSUN","pt":"flow","to":"payload","tot":"msg","dc":true},{"t":"set","p":"planes","pt":"msg","to":"[[73,35],[253,35]]","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":970,"y":1460,"wires":[["825c7d2c9c3b7041"]]},{"id":"1137d7686528f79e","type":"comment","z":"227fcbf9d11adcdf","g":"8c7f0429158e22f4","name":"The Sun Tracker","info":"This is independent code, and will build a track of sun elevation\nfor azimuth [0-359]. Values of azimuth and elevation are used only\nas integers, taken from the sun sensor updates.\nNote that the array will take a full 24 hours to build. During the\nday, Home Assistant will update around every four minutes, which\nequates to one degree azimuth. During the night, Home Assistant will\nupdate less frequently, and the code interpolates linearly.\n\nShade is set when the sun elevation is between 0 and the given\nhorizon.\n\nHorizon is loaded based on n-points from North, where\nthe number of points given must be an integer divisor of 360.\nThe horizon setting is taken from an array of strings of the from\n\"20 24 28 32 36 40 44 40 36 32 28 16 16 16 16 16 10 16\"\nThe above is parsed as numbers separated by a space, a leading 0 is\noptional. With four strings in the array, each string represents 90\ndegrees from N-E, E-S, S-W, W-N, starting at due north, east, south\nand west.\nEntries per quadrant    -   degree interval\n2                           45\n3                           30\n5                           18\n6                           15\n9                           10\n10                           9\n15                           6\n18                           5\n30                           3\n\nIdeally there should be at least six entries, and no more than 18 - so \nin reality only 6, 9, 10, 15 or 18 entries per quadrant are permitted.","x":320,"y":1460,"wires":[]},{"id":"825c7d2c9c3b7041","type":"change","z":"227fcbf9d11adcdf","g":"8c7f0429158e22f4","name":"Sun Details","rules":[{"t":"set","p":"sundetails","pt":"msg","to":"(\t/* compute sun details and add these in to sun record */\t\t    /* FUNCTION: angle to compass point */\t    $cpoint:=function($angle){(\t        $p:=$floor(($angle+11.25)/22.5)%16;\t        $t:=($p-1)%14;\t        $pre:= $p%2=0 ? \"\" : $t<2 ? \"N\" : $t<6 ? \"E\" : $t<10 ? \"S\" : \"W\";\t        $mid:= $p<4 or $p>12 ? \"N\" : $p>4 and $p<12 ? \"S\" : \"\";                        \t        $end:= $p>8 ? \"W\" : $p>0 and $p<8 ? \"E\" : \"\";\t        {\"point\": $p, \"text\": $pre & $mid & $end};\t    )};\t\t    $p:=payload;\t    $aznow:=$round($p.aznew,0);\t    /* get local midnight as UTC, and set array of times for graphing in HA */\t    $midnightUTC:=$now('[Y]-[M01]-[D01]T')&\"00:00:00\"~>$toMillis();\t\t    /* plane is elevation of surface, plot perpendicular elevation */\t    $pdata:=planes.(\t        $a:=$[0]; $e:=90-$[1];\t        [[$a-1, $e-1], [$a, $e], [$a+1, $e-1]];\t        );\t\t    $t:=$p.track;\t    $arc:=[1, 1.4, 2.2, 3.2];   /* calculate approx arc length based on azimuth diff = 1 and elevation diff = 0, 1, 2, 3 */\t    $track:=$t~>|$|(\t        $az:=azimuth;\t        $ediff:=$abs(elevation-$t[azimuth=$az+1].elevation);\t        {\"az\": azimuth,\t         \"el\": elevation,\t         \"arc\": $arc[$round($ediff)],   /* round otherwise it floors to integer */\t         \"hz\": horizon,\t         \"sky\": elevation-horizon,\t         \"plane\": ($az:=azimuth; $p:=($pdata[$[0]=$az])[1]; $exists($p) ? $p : null),\t         \"time\": $midnightUTC + 240000*azimuth\t        }),[\"azimuth\", \"horizon\", \"elevation\"]|;\t\t    $x:= $track[el>=0];\t    /* trim any extra 0 elevation from front and tail */\t    $path:= $x[[$count($x[el=0 and az<180])-1 .. $count($x)-$count($x[el=0 and az>180])]];\t\t    $range:=$path[[0, -1]].az;\t    $span:= $count($path)-1;\t    $togo:=$path[az>$aznow];\t    $arearem:=$sum($togo.sky[$>0]);\t    $arcleft:=$round($sum($togo[sky>0].arc));\t\t    {\"points\": $count($path),\t    \"azfrom\": $range[0],\t    \"azupto\": $range[1],\t    \"cptfrom\": $cpoint($range[0]),    \t    \"cptupto\": $cpoint($range[1]),\t    \"cptnow\": $cpoint($aznow),    \t    \"spanfac\": $round($span/180,2),\t    \"elpeak\": $max($path.el),\t    \"arclen\": $round($sum($path.arc)),\t    \"arcsun\": $round($sum($path[sky>0].arc)),\t    \"arcrem\": $exists($arcleft) ? $arcleft : 0,    \t    \"areapath\": $sum($path.el),\t    \"areasuny\": $sum($path.sky[$>0]),\t    \"arealeft\": $exists($arearem) ? $arearem : 0,\t    \"isshaded\": $exists($p.isshade) ? $p.isshade : \"night\",\t    \"array\":   {\"time\": $track.time,\t                \"sunpath\": $track.el,\t                \"horizon\": $track.hz,\t                \"sunnow\": $track.(az>=$aznow-1 and az<=$aznow+1 ? el : null),\t                \"plane\": $track.plane}\t    };\t\t\t\t)","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":1130,"y":1460,"wires":[["b1e066477e25c6ea"]]},{"id":"b1e066477e25c6ea","type":"ha-sensor","z":"227fcbf9d11adcdf","g":"8c7f0429158e22f4","name":"Sun Details","entityConfig":"f57a90f818cd4648","version":0,"state":"sundetails.cptnow.text","stateType":"msg","attributes":[{"property":"grapharray","value":"sundetails.array","valueType":"msg"},{"property":"spanfactor","value":"sundetails.spanfac","valueType":"msg"},{"property":"peakelevation","value":"sundetails.elpeak","valueType":"msg"},{"property":"areapath","value":"sundetails.areapath","valueType":"msg"},{"property":"areasun","value":"sundetails.areasuny","valueType":"msg"},{"property":"arealeft","value":"sundetails.arealeft","valueType":"msg"},{"property":"shaded","value":"sundetails.isshaded","valueType":"msg"},{"property":"arclen","value":"sundetails.arclen","valueType":"msg"},{"property":"arcsun","value":"sundetails.arcsun","valueType":"msg"},{"property":"arcrem","value":"sundetails.arcrem","valueType":"msg"}],"inputOverride":"block","outputProperties":[],"x":1290,"y":1460,"wires":[[]],"d":true,"server":""},{"id":"f57a90f818cd4648","type":"ha-entity-config","server":"","deviceConfig":"","name":"SC Sun Detail","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"Sun Details"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""},{"property":"unit_of_measurement","value":""},{"property":"state_class","value":""}],"resend":false,"debugEnabled":false,"d":true},{"id":"92fea85ae28492b1","type":"group","z":"227fcbf9d11adcdf","g":"8919a3535559afa6","name":"Home Assistant Sensors","style":{"stroke":"#000000","label":true,"color":"#000000","fill":"#bfdbef"},"nodes":["f23666fdf772d18b","a12031f6dd1f7a2a","5a1db425bbac4880","78ad3dff23094999","56fe37fbdeecac57","0dc3058c928bf7a0","197bf3b2d5845e44","c7415146a01666e2","439dfc39203f40ac","a80c7a8a8c6984d8","f38938cc765530d2","cc3f4c6bcaaa5819","a95228cf4b7fe898","f2dfe27275131f8a","8e2f77033f2388bd"],"x":54,"y":1139,"w":1332,"h":262},{"id":"f23666fdf772d18b","type":"ha-sensor","z":"227fcbf9d11adcdf","g":"92fea85ae28492b1","name":"SolCast FC Today Total","entityConfig":"f029b7d187ecca58","version":0,"state":"fc_today.updates>0 ? fc_today.fc_median : 0","stateType":"jsonata","attributes":[{"property":"today_yesterday","value":"fc_todayest.fc_median","valueType":"msg"},{"property":"tomorrow","value":"fc_tomorrow.updates>0 ? fc_tomorrow.fc_median : 0","valueType":"jsonata"},{"property":"yesterday_hc","value":"fc_yesterday.fc_est","valueType":"msg"},{"property":"yesterday_ratio","value":"fc_yesterday.ratio","valueType":"msg"},{"property":"shade_array","value":"Sun.shade","valueType":"msg"},{"property":"yesDate","value":"fc_summary.date","valueType":"msg"},{"property":"yesActual","value":"fc_summary.actual","valueType":"msg"},{"property":"yesAvFc","value":"fc_summary.av_fc","valueType":"msg"},{"property":"yesAvShaded","value":"fc_summary.av_shaded","valueType":"msg"},{"property":"yesFirstShaded","value":"fc_summary.first_shaded","valueType":"msg"},{"property":"yesHc","value":"fc_summary.hindcast","valueType":"msg"},{"property":"yesShadeRatio","value":"fc_summary.shade_ratio","valueType":"msg"},{"property":"yesShadedHC","value":"fc_summary.shaded_hc","valueType":"msg"},{"property":"FC_HC_ratio","value":"fc_summary.FCHC_ratio","valueType":"msg"},{"property":"act_FC_ratio","value":"fc_summary.actualFC_ratio","valueType":"msg"},{"property":"act_SFC_ratio","value":"fc_summary.actualSFC_ratio","valueType":"msg"},{"property":"act_FSFC_ratio","value":"fc_summary.actualFSFC_ratio","valueType":"msg"},{"property":"act_HC_ratio","value":"fc_summary.actualHC_ratio","valueType":"msg"},{"property":"act_SHC_ratio","value":"fc_summary.actualSHC_ratio","valueType":"msg"}],"inputOverride":"allow","outputProperties":[],"x":510,"y":1280,"wires":[["197bf3b2d5845e44"]],"d":true,"server":""},{"id":"a12031f6dd1f7a2a","type":"comment","z":"227fcbf9d11adcdf","g":"92fea85ae28492b1","name":"Output @ each half-hour","info":"","x":190,"y":1180,"wires":[]},{"id":"5a1db425bbac4880","type":"link in","z":"227fcbf9d11adcdf","g":"92fea85ae28492b1","name":"Half-Hourly Output","links":["d60fcde274b5ebec"],"x":355,"y":1180,"wires":[["56fe37fbdeecac57","c7415146a01666e2"]]},{"id":"78ad3dff23094999","type":"link in","z":"227fcbf9d11adcdf","g":"92fea85ae28492b1","name":"Output Periodic","links":["6e6813d2450b26af"],"x":355,"y":1280,"wires":[["f23666fdf772d18b"]]},{"id":"56fe37fbdeecac57","type":"change","z":"227fcbf9d11adcdf","g":"92fea85ae28492b1","name":"HA Graph data","rules":[{"t":"set","p":"payload","pt":"msg","to":"(\t/* Nov 2024 graph preparation for three days */\t/* modify to add a zero record at day ends   */\t\t/* collect basic array for \"yes\", \"tod\", \"tom\" */\t/* flatten this array and add index value      */\t\t    $dates:= dates[dayis in [\"yes\", \"tod\", \"tom\"]].date;\t    $x:=(store.*[date in $dates])#$i.$merge([$, {\"index\": $i}]);\t/* pick out all updated values, extended by one either side */\t    $pick:=$dates.(\t        $d:=$;\t        $p:=$x[date=$d and $type(update)=\"array\"].index;\t        {\"range\": [$p[0]-1..$p[-1]+1]}\t        ).range;\t    $table:=$x[index in $pick];\t/* add null or 0 values for missing entries to fill, factor actual to the same scale */\t    $table:= $table ~> |$|($d:=date; $tod:=tod_med[-1]; $tom:=tom_med[-1];\t        {\t        \"yes_est\": $not($exists(yes_est)) ? null,\t        \"tom_med\": $exists($tom) ? $tom : 0,\t        \"tod_med\": $exists($tod) ? $tod : null,\t        \"actual\":  $exists(actual) ? actual*2 : null,\t        \"day\": $dates[date=$d].dayis}), [\"update\", \"tod_low\", \"tod_hih\", \"tom_low\", \"tom_hih\", \"fut_med\", \"fut_low\", \"fut_hih\"]|;\t/* build final array */\t    {\"time\": [$table.msec],\t     \"yesterday\": [$table.yes_est],\t     \"today\": [$table.tod_med],\t     \"tomorrow\": [$table.tom_med],\t     \"actual\": [$table.actual],\t     \"update\": $table[$index].timestamp};\t\t\t)","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":480,"y":1220,"wires":[["0dc3058c928bf7a0"]]},{"id":"0dc3058c928bf7a0","type":"ha-sensor","z":"227fcbf9d11adcdf","g":"92fea85ae28492b1","name":"Solcast Table (Graph)","entityConfig":"df0a56d308a87d87","version":0,"state":"$now()","stateType":"jsonata","attributes":[{"property":"time","value":"payload.time","valueType":"msg"},{"property":"yesterday","value":"payload.yesterday","valueType":"msg"},{"property":"today","value":"payload.today","valueType":"msg"},{"property":"tomorrow","value":"payload.tomorrow","valueType":"msg"},{"property":"actual","value":"payload.actual","valueType":"msg"}],"inputOverride":"block","outputProperties":[],"x":940,"y":1220,"wires":[[]],"d":true,"server":""},{"id":"197bf3b2d5845e44","type":"ha-sensor","z":"227fcbf9d11adcdf","g":"92fea85ae28492b1","name":"SolCast FC Update History","entityConfig":"9f6669844be0fad2","version":0,"state":"$count(fc_updates)","stateType":"jsonata","attributes":[{"property":"updates","value":"fc_updates","valueType":"msg"},{"property":"history","value":"fc_history","valueType":"msg"}],"inputOverride":"allow","outputProperties":[],"x":780,"y":1280,"wires":[[]],"d":true,"server":""},{"id":"c7415146a01666e2","type":"ha-sensor","z":"227fcbf9d11adcdf","g":"92fea85ae28492b1","name":"Solcast Regular Update","entityConfig":"03accdd030645cda","version":0,"state":"payload.current.time","stateType":"msg","attributes":[{"property":"updates","value":"payload.updates","valueType":"msg"},{"property":"isshaded","value":"payload.current.isshaded","valueType":"msg"},{"property":"lasthalf","value":"payload.current.last","valueType":"msg"},{"property":"thishalf","value":"payload.current.this","valueType":"msg"},{"property":"nexthalf","value":"payload.current.next","valueType":"msg"},{"property":"lasthour","value":"payload.current.lasthour","valueType":"msg"},{"property":"thishour","value":"payload.current.thishour","valueType":"msg"},{"property":"nexthour","value":"payload.current.nexthour","valueType":"msg"},{"property":"shaded","value":"payload.values.fc_shaded","valueType":"msg"},{"property":"actualcum","value":"payload.values.act_now","valueType":"msg"},{"property":"remaining","value":"payload.values.remaining","valueType":"msg"},{"property":"solar_cum_pc","value":"payload.analysis.solar_cum_pc","valueType":"msg"},{"property":"solar_day_pc","value":"payload.analysis.solar_day_pc","valueType":"msg"},{"property":"array","value":"payload.data","valueType":"msg"}],"inputOverride":"allow","outputProperties":[],"x":690,"y":1180,"wires":[[]],"d":true,"server":""},{"id":"439dfc39203f40ac","type":"comment","z":"227fcbf9d11adcdf","g":"92fea85ae28492b1","name":"Note:- It will take a full 24hours to build \\n the entire sun path array and up to \\n three days for the full forecast data","info":"","x":1210,"y":1220,"wires":[]},{"id":"a80c7a8a8c6984d8","type":"ha-sensor","z":"227fcbf9d11adcdf","g":"92fea85ae28492b1","name":"Daylight Saving Time Details","entityConfig":"7dd07c1507418bf2","version":0,"state":"payload.now_loc","stateType":"msg","attributes":[{"property":"year","value":"\"\" & payload.for_year","valueType":"jsonata"},{"property":"offset","value":"payload.utc_offset","valueType":"msg"},{"property":"dst_now","value":"payload.dst_is_on","valueType":"msg"},{"property":"dst_one","value":"$fromMillis(1000* payload.dst_details[1].from.seconds)","valueType":"jsonata"},{"property":"dst_two","value":"$fromMillis(1000* payload.dst_details[2].from.seconds)","valueType":"jsonata"}],"inputOverride":"allow","outputProperties":[],"x":1240,"y":1360,"wires":[[]],"d":true,"server":""},{"id":"f38938cc765530d2","type":"comment","z":"227fcbf9d11adcdf","g":"92fea85ae28492b1","name":"Updated @ all API calls","info":"","x":180,"y":1280,"wires":[]},{"id":"cc3f4c6bcaaa5819","type":"inject","z":"227fcbf9d11adcdf","g":"92fea85ae28492b1","name":"Sunday Mornings","props":[],"repeat":"","crontab":"45 03 * * 0","once":true,"onceDelay":"120","topic":"","x":710,"y":1360,"wires":[["8e2f77033f2388bd"]]},{"id":"a95228cf4b7fe898","type":"link in","z":"227fcbf9d11adcdf","g":"92fea85ae28492b1","name":"Manual Trigger","links":["27d82ce5a90984bd"],"x":875,"y":1340,"wires":[["8e2f77033f2388bd"]]},{"id":"f2dfe27275131f8a","type":"comment","z":"227fcbf9d11adcdf","g":"92fea85ae28492b1","name":"Solcast Periodic Update","info":"","x":940,"y":1180,"wires":[]},{"id":"8e2f77033f2388bd","type":"change","z":"227fcbf9d11adcdf","g":"92fea85ae28492b1","name":"Read DST","rules":[{"t":"set","p":"payload","pt":"msg","to":"solarDST","tot":"flow","dc":true}],"action":"","property":"","from":"","to":"","reg":false,"x":1010,"y":1360,"wires":[["a80c7a8a8c6984d8"]]},{"id":"f029b7d187ecca58","type":"ha-entity-config","server":"","deviceConfig":"","name":"SC Solcast Today","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"Solcast FC Today Total"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""},{"property":"unit_of_measurement","value":"kWh"},{"property":"state_class","value":""}],"resend":true,"debugEnabled":false,"d":true},{"id":"df0a56d308a87d87","type":"ha-entity-config","server":"","deviceConfig":"","name":"SC Solcast Table","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"Solcast Daily Graph Table"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""},{"property":"unit_of_measurement","value":""},{"property":"state_class","value":""}],"resend":false,"debugEnabled":false,"d":true},{"id":"9f6669844be0fad2","type":"ha-entity-config","server":"","deviceConfig":"","name":"SC Solcast Update","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"Solcast Update History"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""},{"property":"unit_of_measurement","value":""},{"property":"state_class","value":""}],"resend":false,"debugEnabled":false,"d":true},{"id":"03accdd030645cda","type":"ha-entity-config","server":"","deviceConfig":"","name":"SC Solcast Regular","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"Solcast Regular Update"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""},{"property":"unit_of_measurement","value":""},{"property":"state_class","value":""}],"resend":false,"debugEnabled":false,"d":true},{"id":"7dd07c1507418bf2","type":"ha-entity-config","server":"","deviceConfig":"","name":"SC DST details","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"DST Details"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""},{"property":"unit_of_measurement","value":""},{"property":"state_class","value":""}],"resend":false,"debugEnabled":false,"d":true},{"id":"55e3a0812a22479a","type":"link in","z":"227fcbf9d11adcdf","g":"8919a3535559afa6","name":"HA1 has restarted","links":["dad332dbf9b4dbb4"],"x":215,"y":720,"wires":[["27d82ce5a90984bd"]]},{"id":"56bb652f7756710d","type":"comment","z":"227fcbf9d11adcdf","g":"8919a3535559afa6","name":"If HA restarts, refresh graph etc","info":"","x":470,"y":720,"wires":[]},{"id":"27d82ce5a90984bd","type":"link out","z":"227fcbf9d11adcdf","g":"8919a3535559afa6","name":"Manually Refresh","mode":"link","links":["17a4973e139bc551","fa3b729a7437c52a","a95228cf4b7fe898"],"x":295,"y":720,"wires":[]}]